#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Wed May 25 09:29:21 2016
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn sudo /opt/calmio/installer_scripts/setup.sh
match_max 100000
expect -exact "Configuration Stage 1: Application location and startup\r
-------------------------------------------------------\r
Which run level should python-calm automatically start up on? \[default:2\] >"
send -- "3\r"
expect -exact "3\r
Copying over initscript to /etc/init.d         \[ Okay \]\r
Setting up guest system\r
Copying resolv.conf         \[ Okay \]\r
Copying /etc/hosts         \[ Okay \]\r
Copying /var/run/utmp         \[ Okay \]\r
Copying sudoers         \[ Okay \]\r
Configuration Stage 2: Application setup\r
-------------------------------------------------------\r
Binding /dev                                              \[ Okay \]\r
Binding /dev/shm                                  \[ Okay \]\r
Binding /dev/pts                                  \[ Okay \]\r
Binding /proc                                           \[ Okay \]\r
Generating locales         Generating locales (this might take a while)...\r
Generation complete.\r
\[ Okay \]\r
Setting up timezone for the application\r
Choose your timezone          Configuring tzdata\r
------------------\r
\r
Please select the geographic area in which you live. Subsequent configuration questions will narrow this down by presenting a list of cities, representing the time zones in which \r
they are located.\r
\r
  1. Africa   3. Antarctica  5. Arctic Ocean  7. Atlantic Ocean  9. Indian Ocean    11. System V timezones  13. None of the above\r
  2. America  4. Australia   6. Asia          8. Europe          10. Pacific Ocean  12. US\r
\r
\[4mGeographic area: \[24m\[1m"
send -- "6\r"
expect -exact "6\r
\[0m\[0m\r
\r
Please select the city or region corresponding to your time zone.\r
\r
  1. Aden      10. Baku        19. Colombo   28. Ho_Chi_Minh  37. Kamchatka     46. Kuwait        55. Omsk        64. Sakhalin       73. Tehran         82. Vladivostok\r
  2. Almaty    11. Bangkok     20. Damascus  29. Hong_Kong    38. Karachi       47. Macau         56. Oral        65. Samarkand      74. Tel_Aviv       83. Yakutsk\r
  3. Amman     12. Barnaul     21. Dhaka     30. Hovd         39. Kashgar       48. Magadan       57. Phnom_Penh  66. Seoul          75. Thimphu        84. Yekaterinburg\r
  4. Anadyr    13. Beirut      22. Dili      31. Irkutsk      40. Kathmandu     49. Makassar      58. Pontianak   67. Shanghai       76. Tokyo          85. Yerevan\r
  5. Aqtau     14. Bishkek     23. Dubai     32. Istanbul     41. Khandyga      50. Manila        59. Pyongyang   68. Singapore      77. Ujung_Pandang\r
  6. Aqtobe    15. Brunei      24. Dushanbe  33. Jakarta      42. Kolkata       51. Muscat        60. Qatar       69. Srednekolymsk  78. Ulaanbaatar\r
  7. Ashgabat  16. Chita       25. Gaza      34. Jayapura     43. Krasnoyarsk   52. Nicosia       61. Qyzylorda   70. Taipei         79. Urumqi\r
  8. Baghdad   17. Choibalsan  26. Harbin    35. Jerusalem    44. Kuala_Lumpur  53. Novokuznetsk  62. Rangoon     71. Tashkent       80. Ust-Nera\r
  9. Bahrain   18. Chongqing   27. Hebron    36. Kabul        45. Kuching       54. Novosibirsk   63. Riyadh      72. Tbilisi        81. Vientiane\r
\r
\[4mTime zone: \[24m\[1m"
send -- "42\r"
expect eof

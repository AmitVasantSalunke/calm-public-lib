{
    "tasks":[
        {
            "uid":"572c61299acaaf5861311e84",
            "classification":"provision_aws_ec2",
            "creation_time":1462173834,
            "user_data":null,
            "credential_id":"572c61299acaaf5861311e56",
            "keypair":"sarath",
            "security_groups":[
                {
                    "vpc_id":"vpc-b52286d0",
                    "uuid":"sg-06fb6e7e",
                    "uid":"sg-06fb6e7e",
                    "classification":null,
                    "name":"Flocker"
                }
            ],
            "subnet":"subnet-14fc2e3e",
            "network":"vpc-b52286d0",
            "zone":"us-east-1",
            "ami_name":null,
            "storage":{
                "Root":{
                    "Device":"\/dev\/sda1",
                    "delete_on_termination":true,
                    "volume_type":"standard",
                    "Size":8
                },
                "EBS":[

                ]
            },
            "variable_cost":0.0,
            "version":138,
            "editables":[

            ],
            "iam_role":null,
            "ami":"ami-a37b65c9",
            "tags":{

            },
            "fixed_cost":null,
            "modification_time":1462528528,
            "public_ip":true,
            "shutdown_behavior":"terminate",
            "name":"Provision AWS EC2",
            "instance_name":"Config-node@@{calm_array_index}@@",
            "instance_type":"t2.large",
            "critical":true
        },
        {
            "uid":"572c61299acaaf5861311e85",
            "classification":"provision_aws_ec2",
            "creation_time":1462173986,
            "user_data":null,
            "credential_id":"572c61299acaaf5861311e56",
            "keypair":"sarath",
            "security_groups":[
                {
                    "vpc_id":"vpc-b52286d0",
                    "uuid":"sg-06fb6e7e",
                    "uid":"sg-06fb6e7e",
                    "classification":null,
                    "name":"Flocker"
                }
            ],
            "subnet":"subnet-14fc2e3e",
            "network":"vpc-b52286d0",
            "zone":"us-east-1",
            "ami_name":null,
            "storage":{
                "Root":{
                    "Device":"\/dev\/sda1",
                    "delete_on_termination":true,
                    "volume_type":"standard",
                    "Size":8
                },
                "EBS":[

                ]
            },
            "variable_cost":0.0,
            "version":138,
            "editables":[

            ],
            "iam_role":null,
            "ami":"ami-a37b65c9",
            "tags":{

            },
            "fixed_cost":null,
            "modification_time":1462528528,
            "public_ip":true,
            "shutdown_behavior":"terminate",
            "name":"Provision AWS EC2",
            "instance_name":"Data-node@@{calm_array_index}@@",
            "instance_type":"t2.large",
            "critical":true
        },
        {
            "uid":"572c61299acaaf5861311e86",
            "classification":"runshell",
            "script":"#!\/bin\/bash\nmkdir -p @@{MONGO_BACKUP_PATH}@@\ncat > \/tmp\/set-hostnames.py <<EOF\n#!\/usr\/bin\/python\nimport re\nconfig_ips=\"@@{calm_array_public_ip_address}@@\"\ndata_ips=\"@@{DATA_IPS}@@\"\n\nhostfile = open('\/etc\/hosts', 'r').read()\n\n# Remove all current mongodb references\nprint hostfile\nhostfile = re.sub('\\n#MONGODB-BEGIN.*?#MONGODB-END', '', hostfile, flags=re.DOTALL)\n\n# Add a placeholder for mongodb hosts\nhostfile += \"#MONGODB-BEGIN\\n\"\n\n# Loop through all global variables and substract all mongodb hosts and IPs\ncount=1\nfor ip in config_ips.split(','):\n  hostfile += ip + \" config\" + str(count) + \".mongodb\\n\"\n  count += 1\ncount=1\nfor ip in data_ips.split(','):\n  hostfile += ip + \" data\" + str(count) + \".mongodb\\n\"\n  count += 1\n# Close the list of mongodb hosts\nhostfile += \"#MONGODB-END\\n\"\n\n# Save the results back to the hosts file\nopen('\/etc\/hosts', 'w').write(hostfile)\nEOF\nsudo python \/tmp\/set-hostnames.py\n",
            "creation_time":1462173758,
            "credential_id":"572c61299acaaf5861311e56",
            "modification_time":1462528528,
            "version":136,
            "critical":false,
            "editables":[

            ],
            "name":"SetHostnames"
        },
        {
            "uid":"572c61299acaaf5861311e87",
            "classification":"runshell",
            "script":"#!\/usr\/bin\/python\nimport os, json, subprocess, time, sys\nif \"@@{calm_array_index}@@\" != \"0\":\n  sys.exit(0)\nreplicas = int(@@{NO_OF_REPLICASETS}@@)\nconfignodes = []\n\nfor y in range(0, replicas):\n  confignodes.append({ \"_id\": y, \"host\": \"config\" + str(y+1) + \".mongodb\" })\nprint subprocess.check_output(\"sudo mongo --host config1.mongodb --port 27017 --eval 'rs.initiate( { _id: \\\"configReplSet\\\", configsvr: true, members: \" + json.dumps(confignodes) + \" } )'\", shell=True)\n# Wait 30 sec for config servers to initiate\ntime.sleep(30)\n# Wait 30 sec for config servers to initiate\ntime.sleep(30)\nfor x in range(1, int(@@{NO_OF_SHARDS}@@)+1):\n\n    host = (x-1) * replicas + 1\n    nodes = []\n\n    for y in range(0, replicas):\n        nodes.append({ \"_id\": y, \"host\": \"data\" + str(host+y) + \".mongodb\" })\n\n    # Create the replica set for current shard\n    print subprocess.check_output(\"sudo mongo --host data\" + str(host) + \".mongodb --port 27017 --eval 'rs.initiate( { _id: \\\"dataReplSet\" + str(x) + \"\\\", members: \" + json.dumps(nodes) + \" } )'\", shell=True)\ntime.sleep(60)\nfor x in range(1, int(@@{NO_OF_SHARDS}@@)+1):\n\n    host = (x-1) * replicas + 1\n\n    # Add current shard to the config servers\n    print subprocess.check_output(\"sudo mongo --host config1.mongodb --port 27018 --eval 'sh.addShard( \\\"dataReplSet\" + str(x) + \"\/data\" + str(host) + \".mongodb:27017\\\" )'\", shell=True)\n",
            "creation_time":1462173773,
            "credential_id":"572c61299acaaf5861311e56",
            "modification_time":1462528528,
            "version":135,
            "critical":false,
            "editables":[

            ],
            "name":"ActivateMongo"
        },
        {
            "uid":"572c61299acaaf5861311e88",
            "classification":"runshell",
            "script":"#!\/bin\/bash\nset -ex\n\n# Set default values\n: ${MONGODB_VERSION:=\"3.2.3\"}\n: ${MONGODB_PATH:=\"\/mnt\/mongodb\"}\n\n# Add mongodb repository\nsudo apt-key adv --keyserver hkp:\/\/keyserver.ubuntu.com:80 --recv EA312927\necho \"deb http:\/\/repo.mongodb.org\/apt\/ubuntu trusty\/mongodb-org\/3.2 multiverse\" | sudo tee -a \/etc\/apt\/sources.list.d\/mongodb-org-3.2.list\nsudo apt-get update\n\n# Install mongodb packages\nsudo apt-get install -y mongodb-org=${MONGODB_VERSION} mongodb-org-server=${MONGODB_VERSION} mongodb-org-shell=${MONGODB_VERSION} mongodb-org-mongos=${MONGODB_VERSION} mongodb-org-tools=${MONGODB_VERSION}\n\n# Make sure mongodb does not get updated automatically\necho \"mongodb-org hold\" | sudo dpkg --set-selections\necho \"mongodb-org-server hold\" | sudo dpkg --set-selections\necho \"mongodb-org-shell hold\" | sudo dpkg --set-selections\necho \"mongodb-org-mongos hold\" | sudo dpkg --set-selections\necho \"mongodb-org-tools hold\" | sudo dpkg --set-selections\n\n# Prepare the path for the databases\nsudo mkdir -p ${MONGODB_PATH}\nsudo chown mongodb:mongodb ${MONGODB_PATH}\n\n# Disable huge mem pages\nsudo sed -i '\/pre-start script\/a echo \"never\" > \/sys\/kernel\/mm\/transparent_hugepage\/enabled; echo \"never\" > \/sys\/kernel\/mm\/transparent_hugepage\/defrag' \/etc\/init\/mongod.conf\n\n# Enable mongodb to listen for remote connections\nsudo sed -i 's\/bindIp:\/#bindIp:\/g' \/etc\/mongod.conf\n\n# Tell mongodb where to store database files\nsudo sed -i \"s#\/var\/lib\/mongodb#${MONGODB_PATH}#g\" \/etc\/mongod.conf\n",
            "creation_time":1462173904,
            "credential_id":"572c61299acaaf5861311e56",
            "modification_time":1462528528,
            "version":133,
            "critical":false,
            "editables":[

            ],
            "name":"InstallMongo"
        },
        {
            "uid":"572c61299acaaf5861311e89",
            "classification":"runshell",
            "script":"#!\/bin\/bash\nset -ex\n\n# Tell mongodb to act as a config server\nsudo sed -i 's\/#sharding:\/sharding:\\n  clusterRole: configsvr\/g' \/etc\/mongod.conf\n\n# Tell mongodb to be a member of a replication set\nsudo sed -i 's\/#replication:\/replication:\\n  replSetName: configReplSet\/g' \/etc\/mongod.conf\n\n# Start mongos and make sure it is started on reboots\nCOMMAND=\"sudo -u mongodb -b mongos --port 27018 --configdb configReplSet\/config1.mongodb:27017,config2.mongodb:27017,config3.mongodb:27017 >> \/var\/log\/mongodb\/mongos.log 2>&1\"\nsudo sed -i \"1a ${COMMAND}\" \/etc\/rc.local\nsudo su - -c \"eval ${COMMAND}\"\nsudo service mongod restart",
            "creation_time":1462173904,
            "credential_id":"572c61299acaaf5861311e56",
            "modification_time":1462528528,
            "version":133,
            "critical":false,
            "editables":[

            ],
            "name":"Configset-Setup-Mongo"
        },
        {
            "uid":"572c61299acaaf5861311e8a",
            "classification":"runshell",
            "script":"#!\/bin\/bash\nsudo apt-get install nagios-plugins nagios-nrpe-server -y \nsudo cp \/etc\/nagios\/nrpe.cfg \/etc\/nagios\/nrpe.cfg_bck\nset -e\nsudo sed -i '\/allowed_hosts=\/s\/127.0.0.1\/127.0.0.1,@@{Nagios}@@\/' \/etc\/nagios\/nrpe.cfg\nsudo sed -i '\/server_address=\/s\/127.0.0.1\/0.0.0.0\/' \/etc\/nagios\/nrpe.cfg\nsudo sed -i 's\/#server_address=\/server_address=\/' \/etc\/nagios\/nrpe.cfg\nsudo sed -i \"\/command\\[check_load\\]\/d\" \/etc\/nagios\/nrpe.cfg\necho command[check_load]=\/usr\/lib\/nagios\/plugins\/check_load -w 0.20,50,40 -c 0.30,75,60 |sudo tee -a \/etc\/nagios\/nrpe.cfg\nsudo su - -c \"\/etc\/init.d\/nagios-nrpe-server restart\"",
            "creation_time":1462173920,
            "credential_id":"572c61299acaaf5861311e56",
            "modification_time":1462528528,
            "version":132,
            "critical":false,
            "editables":[

            ],
            "name":"InstallNagiosAgent"
        },
        {
            "uid":"572c61299acaaf5861311e8b",
            "classification":"runshell",
            "script":"#!\/bin\/bash\ncat > \/tmp\/set-hostnames.py <<EOF\n#!\/usr\/bin\/python\nimport re\nconfig_ips=\"@@{CONFIG_IPS}@@\"\ndata_ips=\"@@{calm_array_public_ip_address}@@\"\n\nhostfile = open('\/etc\/hosts', 'r').read()\n\n# Remove all current mongodb references\nprint hostfile\nhostfile = re.sub('\\n#MONGODB-BEGIN.*?#MONGODB-END', '', hostfile, flags=re.DOTALL)\n\n# Add a placeholder for mongodb hosts\nhostfile += \"#MONGODB-BEGIN\\n\"\n\n# Loop through all global variables and substract all mongodb hosts and IPs\ncount=1\nfor ip in config_ips.split(','):\n  hostfile += ip + \" config\" + str(count) + \".mongodb\\n\"\n  count += 1\ncount=1\nfor ip in data_ips.split(','):\n  hostfile += ip + \" data\" + str(count) + \".mongodb\\n\"\n  count += 1\n# Close the list of mongodb hosts\nhostfile += \"#MONGODB-END\\n\"\n\n# Save the results back to the hosts file\nopen('\/etc\/hosts', 'w').write(hostfile)\nEOF\nsudo python \/tmp\/set-hostnames.py\n",
            "creation_time":1462174022,
            "credential_id":"572c61299acaaf5861311e56",
            "modification_time":1462528528,
            "version":129,
            "critical":false,
            "editables":[

            ],
            "name":"SetHostnames"
        },
        {
            "uid":"572c61299acaaf5861311e8c",
            "classification":"runshell",
            "script":"#!\/bin\/bash\nset -ex\n\n# Set default values\n: ${MONGODB_VERSION:=\"3.2.3\"}\n: ${MONGODB_PATH:=\"\/mnt\/mongodb\"}\n\n# Add mongodb repository\nsudo apt-key adv --keyserver hkp:\/\/keyserver.ubuntu.com:80 --recv EA312927\necho \"deb http:\/\/repo.mongodb.org\/apt\/ubuntu trusty\/mongodb-org\/3.2 multiverse\" | sudo tee -a \/etc\/apt\/sources.list.d\/mongodb-org-3.2.list\nsudo apt-get update\n\n# Install mongodb packages\nsudo apt-get install -y mongodb-org=${MONGODB_VERSION} mongodb-org-server=${MONGODB_VERSION} mongodb-org-shell=${MONGODB_VERSION} mongodb-org-mongos=${MONGODB_VERSION} mongodb-org-tools=${MONGODB_VERSION}\n\n# Make sure mongodb does not get updated automatically\necho \"mongodb-org hold\" | sudo dpkg --set-selections\necho \"mongodb-org-server hold\" | sudo dpkg --set-selections\necho \"mongodb-org-shell hold\" | sudo dpkg --set-selections\necho \"mongodb-org-mongos hold\" | sudo dpkg --set-selections\necho \"mongodb-org-tools hold\" | sudo dpkg --set-selections\n\n# Prepare the path for the databases\nsudo mkdir -p ${MONGODB_PATH}\nsudo chown mongodb:mongodb ${MONGODB_PATH}\n\n# Disable huge mem pages\nsudo sed -i '\/pre-start script\/a echo \"never\" > \/sys\/kernel\/mm\/transparent_hugepage\/enabled; echo \"never\" > \/sys\/kernel\/mm\/transparent_hugepage\/defrag' \/etc\/init\/mongod.conf\n\n# Enable mongodb to listen for remote connections\nsudo sed -i 's\/bindIp:\/#bindIp:\/g' \/etc\/mongod.conf\n\n# Tell mongodb where to store database files\nsudo sed -i \"s#\/var\/lib\/mongodb#${MONGODB_PATH}#g\" \/etc\/mongod.conf\n",
            "creation_time":1462174022,
            "credential_id":"572c61299acaaf5861311e56",
            "modification_time":1462528528,
            "version":129,
            "critical":false,
            "editables":[

            ],
            "name":"InstallMongo"
        },
        {
            "uid":"572c61299acaaf5861311e8d",
            "classification":"runshell",
            "script":"#!\/bin\/bash\nset -ex\nsudo sed -i \"s\/#replication:\/replication:\\n  replSetName: dataReplSet$(((@@{calm_array_index}@@+@@{NO_OF_REPLICASETS}@@)\/@@{NO_OF_REPLICASETS}@@))\/g\" \/etc\/mongod.conf\nsudo service mongod restart\n",
            "creation_time":1462174039,
            "credential_id":"572c61299acaaf5861311e56",
            "modification_time":1462528528,
            "version":128,
            "critical":false,
            "editables":[

            ],
            "name":"Dataset-Setup-Mongo"
        },
        {
            "uid":"572c61299acaaf5861311e8e",
            "classification":"runshell",
            "script":"#!\/bin\/bash\nsudo apt-get install nagios-plugins nagios-nrpe-server -y \nsudo cp \/etc\/nagios\/nrpe.cfg \/etc\/nagios\/nrpe.cfg_bck\nset -e\nsudo sed -i '\/allowed_hosts=\/s\/127.0.0.1\/127.0.0.1,@@{Nagios}@@\/' \/etc\/nagios\/nrpe.cfg\nsudo sed -i '\/server_address=\/s\/127.0.0.1\/0.0.0.0\/' \/etc\/nagios\/nrpe.cfg\nsudo sed -i 's\/#server_address=\/server_address=\/' \/etc\/nagios\/nrpe.cfg\nsudo sed -i \"\/command\\[check_load\\]\/d\" \/etc\/nagios\/nrpe.cfg\necho \"command[check_load]=\/usr\/lib\/nagios\/plugins\/check_load -w 0.20,50,40 -c 0.30,75,60\" |sudo tee -a \/etc\/nagios\/nrpe.cfg\nsudo su - -c \"\/etc\/init.d\/nagios-nrpe-server restart\"",
            "creation_time":1462174056,
            "credential_id":"572c61299acaaf5861311e56",
            "modification_time":1462528528,
            "version":127,
            "critical":false,
            "editables":[

            ],
            "name":"InstallNagiosAgent"
        },
        {
            "uid":"572c61299acaaf5861311e8f",
            "classification":"provision_existing_machine",
            "creation_time":1462174144,
            "credential_id":"572c61299acaaf5861311e57",
            "modification_time":1462528528,
            "version":126,
            "critical":true,
            "editables":[

            ],
            "address":"@@{Nagios}@@",
            "name":"Existing Machine"
        },
        {
            "uid":"572c61299acaaf5861311e90",
            "classification":"runshell",
            "script":"#!\/bin\/bash\ncat > \/tmp\/set-hostnames.py <<EOF\n#!\/usr\/bin\/python\nimport re\nconfig_ips=\"@@{CONFIG}@@\"\ndata_ips=\"@@{DATA}@@\"\n\nhostfile = open('\/etc\/hosts', 'r').read()\n\n# Remove all current mongodb references\nprint hostfile\nhostfile = re.sub('\\n#MONGODB-BEGIN.*?#MONGODB-END', '', hostfile, flags=re.DOTALL)\n\n# Add a placeholder for mongodb hosts\nhostfile += \"#MONGODB-BEGIN\\n\"\n\n# Loop through all global variables and substract all mongodb hosts and IPs\ncount=1\nfor ip in config_ips.split(','):\n  hostfile += ip + \" config\" + str(count) + \".mongodb\\n\"\n  count += 1\ncount=1\nfor ip in data_ips.split(','):\n  hostfile += ip + \" data\" + str(count) + \".mongodb\\n\"\n  count += 1\n# Close the list of mongodb hosts\nhostfile += \"#MONGODB-END\\n\"\n\n# Save the results back to the hosts file\nopen('\/etc\/hosts', 'w').write(hostfile)\nEOF\nsudo python \/tmp\/set-hostnames.py\n",
            "creation_time":1462174144,
            "credential_id":"572c61299acaaf5861311e57",
            "modification_time":1462528528,
            "version":126,
            "critical":false,
            "editables":[

            ],
            "name":"SetHostnames"
        },
        {
            "uid":"572c61299acaaf5861311e91",
            "classification":"runshell",
            "script":"#!\/bin\/bash\nsudo apt-get install -y build-essential python-dev git python-pip\ngit clone https:\/\/github.com\/mzupan\/nagios-plugin-mongodb.git\ncd nagios-plugin-mongodb\ncat requirements | xargs sudo pip install\nsudo cp check_mongodb.py \/usr\/lib\/nagios\/plugins\/\necho \"define command {\n    command_name    check_mongodb\n    command_line    \/usr\/lib\/nagios\/plugins\/check_mongodb.py -H \\$HOSTADDRESS\\$ -A \\$ARG1\\$ -P \\$ARG2\\$ -W \\$ARG3$ -C \\$ARG4$\n}\n\ndefine command {\n    command_name    check_mongodb_database\n    command_line    \/usr\/lib\/nagios\/plugins\/check_mongodb.py -H \\$HOSTADDRESS\\$ -A \\$ARG1\\$ -P \\$ARG2\\$ -W \\$ARG3$ -C \\$ARG4$ -d \\$ARG5$\n}\n\ndefine command {\n    command_name    check_mongodb_collection\n    command_line    \/usr\/lib\/nagios\/plugins\/check_mongodb.py -H \\$HOSTADDRESS\\$ -A \\$ARG1\\$ -P \\$ARG2\\$ -W \\$ARG3$ -C \\$ARG4$ -d \\$ARG5$ -c \\$ARG6$\n}\n\ndefine command {\n    command_name    check_mongodb_replicaset\n    command_line    \/usr\/lib\/nagios\/plugins\/check_mongodb.py -H \\$HOSTADDRESS\\$ -A \\$ARG1\\$ -P \\$ARG2\\$ -W \\$ARG3$ -C \\$ARG4$ -r \\$ARG5$\n}\n\ndefine command {\n    command_name    check_mongodb_query\n    command_line    \/usr\/lib\/nagios\/plugins\/check_mongodb.py-H \\$HOSTADDRESS\\$ -A \\$ARG1\\$ -P \\$ARG2\\$ -W \\$ARG3$ -C \\$ARG4$ -q \\$ARG5$\n}\" | sudo tee \/etc\/nagios-plugins\/config\/check_mongodb.cfg\n\nip_list=\"@@{CONFIG}@@,@@{DATA}@@\"\n\necho \"define command{\n\tcommand_name    calm_resilience_alert\n\tcommand_line\t\/usr\/lib\/nagios\/plugins\/calm_resilience_alert  \\$SERVICESTATE$ \\$SERVICESTATETYPE$ \\$HOSTADDRESS$\n}\" | sudo tee \/etc\/nagios-plugins\/config\/calm_resilience_alert.cfg\n\necho \"define hostgroup{\n\thostgroup_name\t\tMongo Servers\n\talias\t\t\tMongo Servers\n\tmembers\t\t\t$ip_list\n\t}\ndefine service {\n      use                 generic-service\n      hostgroup_name          Mongo Servers\n      service_description     Mongo Connect Check\n      check_command           check_mongodb!connect!27017!2!4\n  }\ndefine service {\n      use                 generic-service\n      hostgroup_name          Mongo Servers\n      service_description     Mongo Free Connections\n      check_command           check_mongodb!connections!27017!70!80\n  }\ndefine service {\n    use                 generic-service\n    hostgroup_name          Mongo Servers\n    service_description     Mongo Replication Lag\n    check_command           check_mongodb!replication_lag!27017!15!30\n}\n\ndefine service {\n    use                 generic-service\n    hostgroup_name          Mongo Servers\n    service_description     Mongo Replication Lag Percentage\n    check_command           check_mongodb!replication_lag_percent!27017!50!75\n}\n\ndefine service {\n    use                 generic-service\n    hostgroup_name          Mongo Servers\n    service_description     Mongo Memory Usage\n    check_command           check_mongodb!memory!27017!20!28\n}\n\ndefine service {\n    use                 generic-service\n    hostgroup_name          Mongo Servers\n    service_description     Mongo Mapped Memory Usage\n    check_command           check_mongodb!memory_mapped!27017!20!28\n}\n\ndefine service {\n      use                     generic-service\n      hostgroup_name          Mongo Servers\n      service_description     MongoDB state\n      check_command           check_mongodb!replset_state!27017!0!0\n}\n\ndefine service {\n      use                     generic-service\n      hostgroup_name          Mongo Servers\n      service_description     MongoDB Index Miss Ratio\n      check_command           check_mongodb!index_miss_ratio!27017!.005!.01\n}\n\ndefine service {\n      use                     generic-service\n      hostgroup_name          Mongo Servers\n      service_description     MongoDB Number of databases\n      check_command           check_mongodb!databases!27017!300!500\n}\n\ndefine service {\n      use                     generic-service\n      hostgroup_name          Mongo Servers\n      service_description     MongoDB Number of collections\n      check_command           check_mongodb!collections!27017!300!500\n}\n\" | sudo tee \/etc\/nagios3\/conf.d\/mongo_services.cfg\n\n\nips=$(echo $ip_list | tr \",\" \"\\n\")\nfor ip in $ips\ndo\n    echo \"define host{\n            use                     generic-host\n            host_name               $ip\n            alias                   $ip\n            address                 $ip\n            notification_period     24x7\n            max_check_attempts      5\n            }\n\n    define service{\n            use                             generic-service\n            host_name                       $ip\n            service_description             PING\n            check_command            check_ping!100.0,20%!500.0,60%\n            notification_period     24x7\n            event_handler                   calm_resilience_alert\n            }\n\n    define service{\n            use                             generic-service\n            host_name                       $ip\n            service_description             SSH\n            check_command            check_ssh\n            notification_period     24x7\n            }\n\n    define service{\n            use                             generic-service\n            host_name                       $ip\n            service_description             CPUload\n            max_check_attempts              5\n            check_command            check_nrpe_1arg!check_load\n            notification_period     24x7\n            }\" | sudo tee \/etc\/nagios3\/conf.d\/$ip.cfg\ndone\necho 'case \"$1\" in\nOK)\n        # The service just came back up, so dont do anything...\n        ;;\nWARNING)\n        # We dont really care about warning states, since the service is probably still running...\n        ;;\nUNKNOWN)\n        ;;\nCRITICAL)\n        case \"$2\" in\n\n        HARD)\n                echo -n \"Triggering The calm resiliency alert\"\n                \/usr\/bin\/curl -k -H \"Content-Type: application\/json\" -u admin:+G47\/KtuznlLGv52ANaH1UnjVNO+vXICiOIxtJJpUsZ3Ar2i2HPiadtbURJQ35A5aS1evqy16fr\/poRGnhUIbw==  http:\/\/dev.calm.io\/externalalert\/resilience?instance_ip=$3\n                ;;\n        esac\n        ;;\nesac\nexit 0' | sudo tee \/usr\/lib\/nagios\/plugins\/calm_resilience_alert\nsudo chmod +x \/usr\/lib\/nagios\/plugins\/calm_resilience_alert\n\nsudo service nagios3 reload\n",
            "creation_time":1462174150,
            "credential_id":"572c61299acaaf5861311e57",
            "modification_time":1462528528,
            "version":125,
            "critical":false,
            "editables":[

            ],
            "name":"UpdateNagiosConfig"
        },
        {
            "uid":"572c61299acaaf5861311e92",
            "classification":"resource_action",
            "creation_time":1462174221,
            "action_type":"scale_up",
            "credential_id":null,
            "modification_time":1462528528,
            "version":121,
            "critical":true,
            "editables":[

            ],
            "scale_by":"@@{NO_OF_REPLICASETS}@@",
            "name":"Scale Up 1 - Data"
        },
        {
            "uid":"572c61299acaaf5861311e93",
            "classification":"runshell",
            "script":"#!\/bin\/bash\ncat > \/tmp\/set-hostnames.py <<EOF\n#!\/usr\/bin\/python\nimport re\nconfig_ips=\"@@{calm_array_public_ip_address}@@\"\ndata_ips=\"@@{DATA_IPS}@@\"\n\nhostfile = open('\/etc\/hosts', 'r').read()\n\n# Remove all current mongodb references\nprint hostfile\nhostfile = re.sub('\\n#MONGODB-BEGIN.*?#MONGODB-END', '', hostfile, flags=re.DOTALL)\n\n# Add a placeholder for mongodb hosts\nhostfile += \"#MONGODB-BEGIN\\n\"\n\n# Loop through all global variables and substract all mongodb hosts and IPs\ncount=1\nfor ip in config_ips.split(','):\n  hostfile += ip + \" config\" + str(count) + \".mongodb\\n\"\n  count += 1\ncount=1\nfor ip in data_ips.split(','):\n  hostfile += ip + \" data\" + str(count) + \".mongodb\\n\"\n  count += 1\n# Close the list of mongodb hosts\nhostfile += \"#MONGODB-END\\n\"\n\n# Save the results back to the hosts file\nopen('\/etc\/hosts', 'w').write(hostfile)\nEOF\nsudo python \/tmp\/set-hostnames.py\n",
            "creation_time":1462174275,
            "credential_id":"572c61299acaaf5861311e56",
            "modification_time":1462528528,
            "version":120,
            "critical":false,
            "editables":[

            ],
            "name":"SetHostnames"
        },
        {
            "uid":"572c61299acaaf5861311e94",
            "classification":"runshell",
            "script":"#!\/bin\/bash\ncat > \/tmp\/set-hostnames.py <<EOF\n#!\/usr\/bin\/python\nimport re\nconfig_ips=\"@@{CONFIG_IPS}@@\"\ndata_ips=\"@@{calm_array_public_ip_address}@@\"\n\nhostfile = open('\/etc\/hosts', 'r').read()\n\n# Remove all current mongodb references\nprint hostfile\nhostfile = re.sub('\\n#MONGODB-BEGIN.*?#MONGODB-END', '', hostfile, flags=re.DOTALL)\n\n# Add a placeholder for mongodb hosts\nhostfile += \"#MONGODB-BEGIN\\n\"\n\n# Loop through all global variables and substract all mongodb hosts and IPs\ncount=1\nfor ip in config_ips.split(','):\n  hostfile += ip + \" config\" + str(count) + \".mongodb\\n\"\n  count += 1\ncount=1\nfor ip in data_ips.split(','):\n  hostfile += ip + \" data\" + str(count) + \".mongodb\\n\"\n  count += 1\n# Close the list of mongodb hosts\nhostfile += \"#MONGODB-END\\n\"\n\n# Save the results back to the hosts file\nopen('\/etc\/hosts', 'w').write(hostfile)\nEOF\nsudo python \/tmp\/set-hostnames.py\n",
            "creation_time":1462174275,
            "credential_id":"572c61299acaaf5861311e56",
            "modification_time":1462528528,
            "version":120,
            "critical":false,
            "editables":[

            ],
            "name":"SetHostnames"
        },
        {
            "uid":"572c61299acaaf5861311e95",
            "classification":"runshell",
            "script":"#!\/usr\/bin\/python\nimport json, sys, subprocess, time\nips='@@{calm_array_public_ip_address}@@'\nif (len(ips.split(',')) % @@{NO_OF_REPLICASETS}@@ ) != 0:\n  print \"Invalid number of instances, This configuration will break\"\n  sys.exit(0)\nif @@{calm_array_index}@@+1 != (((len(ips.split(','))\/@@{NO_OF_REPLICASETS}@@)-1)*@@{NO_OF_REPLICASETS}@@ + 1 ):\n  sys.exit(0)\nnodes = []\ncount = 0\nfor i in range((((len(ips.split(','))\/@@{NO_OF_REPLICASETS}@@)-1)*@@{NO_OF_REPLICASETS}@@) + 1, len(ips.split(',')) + 1 ):\n  nodes.append({ \"_id\":  count , \"host\": \"data\" + str(i) + \".mongodb\" })\n  count+=1\n\nprint subprocess.check_output(\"sudo mongo --host data\" + str(((len(ips.split(','))\/@@{NO_OF_REPLICASETS}@@)-1)*@@{NO_OF_REPLICASETS}@@ + 1 ) + \".mongodb --port 27017 --eval 'rs.initiate( { _id: \\\"dataReplSet\" + str(len(ips.split(','))\/@@{NO_OF_REPLICASETS}@@) + \"\\\", members: \" + json.dumps(nodes) + \" } )'\", shell=True)\ntime.sleep(30)\nprint subprocess.check_output(\"sudo mongo --host config1.mongodb --port 27018 --eval 'sh.addShard( \\\"dataReplSet\" + str(len(ips.split(','))\/@@{NO_OF_REPLICASETS}@@) + \"\/data\" + str(((len(ips.split(','))\/@@{NO_OF_REPLICASETS}@@)-1)*@@{NO_OF_REPLICASETS}@@ + 1 ) + \".mongodb:27017\\\" )'\", shell=True)\n",
            "creation_time":1462174346,
            "credential_id":"572c61299acaaf5861311e56",
            "modification_time":1462528528,
            "version":117,
            "critical":false,
            "editables":[

            ],
            "name":"ConfigureReplicaSet"
        },
        {
            "uid":"572c61299acaaf5861311e96",
            "classification":"runshell",
            "script":"#!\/bin\/bash\ncat > \/tmp\/set-hostnames.py <<EOF\n#!\/usr\/bin\/python\nimport re\nconfig_ips=\"@@{CONFIG}@@\"\ndata_ips=\"@@{DATA}@@\"\n\nhostfile = open('\/etc\/hosts', 'r').read()\n\n# Remove all current mongodb references\nprint hostfile\nhostfile = re.sub('\\n#MONGODB-BEGIN.*?#MONGODB-END', '', hostfile, flags=re.DOTALL)\n\n# Add a placeholder for mongodb hosts\nhostfile += \"#MONGODB-BEGIN\\n\"\n\n# Loop through all global variables and substract all mongodb hosts and IPs\ncount=1\nfor ip in config_ips.split(','):\n  hostfile += ip + \" config\" + str(count) + \".mongodb\\n\"\n  count += 1\ncount=1\nfor ip in data_ips.split(','):\n  hostfile += ip + \" data\" + str(count) + \".mongodb\\n\"\n  count += 1\n# Close the list of mongodb hosts\nhostfile += \"#MONGODB-END\\n\"\n\n# Save the results back to the hosts file\nopen('\/etc\/hosts', 'w').write(hostfile)\nEOF\nsudo python \/tmp\/set-hostnames.py\n",
            "creation_time":1462174367,
            "credential_id":"572c61299acaaf5861311e57",
            "modification_time":1462528528,
            "version":116,
            "critical":false,
            "editables":[

            ],
            "name":"SetHostnames"
        },
        {
            "uid":"572c61299acaaf5861311e97",
            "classification":"runshell",
            "script":"#!\/bin\/bash\nsudo apt-get install -y build-essential python-dev git python-pip\ngit clone https:\/\/github.com\/mzupan\/nagios-plugin-mongodb.git\ncd nagios-plugin-mongodb\ncat requirements | xargs sudo pip install\nsudo cp check_mongodb.py \/usr\/lib\/nagios\/plugins\/\necho \"define command {\n    command_name    check_mongodb\n    command_line    \/usr\/lib\/nagios\/plugins\/check_mongodb.py -H \\$HOSTADDRESS\\$ -A \\$ARG1\\$ -P \\$ARG2\\$ -W \\$ARG3$ -C \\$ARG4$\n}\n\ndefine command {\n    command_name    check_mongodb_database\n    command_line    \/usr\/lib\/nagios\/plugins\/check_mongodb.py -H \\$HOSTADDRESS\\$ -A \\$ARG1\\$ -P \\$ARG2\\$ -W \\$ARG3$ -C \\$ARG4$ -d \\$ARG5$\n}\n\ndefine command {\n    command_name    check_mongodb_collection\n    command_line    \/usr\/lib\/nagios\/plugins\/check_mongodb.py -H \\$HOSTADDRESS\\$ -A \\$ARG1\\$ -P \\$ARG2\\$ -W \\$ARG3$ -C \\$ARG4$ -d \\$ARG5$ -c \\$ARG6$\n}\n\ndefine command {\n    command_name    check_mongodb_replicaset\n    command_line    \/usr\/lib\/nagios\/plugins\/check_mongodb.py -H \\$HOSTADDRESS\\$ -A \\$ARG1\\$ -P \\$ARG2\\$ -W \\$ARG3$ -C \\$ARG4$ -r \\$ARG5$\n}\n\ndefine command {\n    command_name    check_mongodb_query\n    command_line    \/usr\/lib\/nagios\/plugins\/check_mongodb.py-H \\$HOSTADDRESS\\$ -A \\$ARG1\\$ -P \\$ARG2\\$ -W \\$ARG3$ -C \\$ARG4$ -q \\$ARG5$\n}\" | sudo tee \/etc\/nagios-plugins\/config\/check_mongodb.cfg\n\nip_list=\"@@{CONFIG}@@,@@{DATA}@@\"\n\necho \"define command{\n\tcommand_name    calm_resilience_alert\n\tcommand_line\t\/usr\/lib\/nagios\/plugins\/calm_resilience_alert  \\$SERVICESTATE$ \\$SERVICESTATETYPE$ \\$HOSTADDRESS$\n}\" | sudo tee \/etc\/nagios-plugins\/config\/calm_resilience_alert.cfg\n\necho \"define hostgroup{\n\thostgroup_name\t\tMongo Servers\n\talias\t\t\tMongo Servers\n\tmembers\t\t\t$ip_list\n\t}\ndefine service {\n      use                 generic-service\n      hostgroup_name          Mongo Servers\n      service_description     Mongo Connect Check\n      check_command           check_mongodb!connect!27017!2!4\n  }\ndefine service {\n      use                 generic-service\n      hostgroup_name          Mongo Servers\n      service_description     Mongo Free Connections\n      check_command           check_mongodb!connections!27017!70!80\n  }\ndefine service {\n    use                 generic-service\n    hostgroup_name          Mongo Servers\n    service_description     Mongo Replication Lag\n    check_command           check_mongodb!replication_lag!27017!15!30\n}\n\ndefine service {\n    use                 generic-service\n    hostgroup_name          Mongo Servers\n    service_description     Mongo Replication Lag Percentage\n    check_command           check_mongodb!replication_lag_percent!27017!50!75\n}\n\ndefine service {\n    use                 generic-service\n    hostgroup_name          Mongo Servers\n    service_description     Mongo Memory Usage\n    check_command           check_mongodb!memory!27017!20!28\n}\n\ndefine service {\n    use                 generic-service\n    hostgroup_name          Mongo Servers\n    service_description     Mongo Mapped Memory Usage\n    check_command           check_mongodb!memory_mapped!27017!20!28\n}\n\ndefine service {\n      use                     generic-service\n      hostgroup_name          Mongo Servers\n      service_description     MongoDB state\n      check_command           check_mongodb!replset_state!27017!0!0\n}\n\ndefine service {\n      use                     generic-service\n      hostgroup_name          Mongo Servers\n      service_description     MongoDB Index Miss Ratio\n      check_command           check_mongodb!index_miss_ratio!27017!.005!.01\n}\n\ndefine service {\n      use                     generic-service\n      hostgroup_name          Mongo Servers\n      service_description     MongoDB Number of databases\n      check_command           check_mongodb!databases!27017!300!500\n}\n\ndefine service {\n      use                     generic-service\n      hostgroup_name          Mongo Servers\n      service_description     MongoDB Number of collections\n      check_command           check_mongodb!collections!27017!300!500\n}\n\" | sudo tee \/etc\/nagios3\/conf.d\/mongo_services.cfg\n\n\nips=$(echo $ip_list | tr \",\" \"\\n\")\nfor ip in $ips\ndo\n    echo \"define host{\n            use                     generic-host\n            host_name               $ip\n            alias                   $ip\n            address                 $ip\n            notification_period     24x7\n            max_check_attempts      5\n            }\n\n    define service{\n            use                             generic-service\n            host_name                       $ip\n            service_description             PING\n            check_command            check_ping!100.0,20%!500.0,60%\n            notification_period     24x7\n            event_handler                   calm_resilience_alert\n            }\n\n    define service{\n            use                             generic-service\n            host_name                       $ip\n            service_description             SSH\n            check_command            check_ssh\n            notification_period     24x7\n            }\n\n    define service{\n            use                             generic-service\n            host_name                       $ip\n            service_description             CPUload\n            max_check_attempts              5\n            check_command            check_nrpe_1arg!check_load\n            notification_period     24x7\n            }\" | sudo tee \/etc\/nagios3\/conf.d\/$ip.cfg\ndone\necho 'case \"$1\" in\nOK)\n        # The service just came back up, so dont do anything...\n        ;;\nWARNING)\n        # We dont really care about warning states, since the service is probably still running...\n        ;;\nUNKNOWN)\n        ;;\nCRITICAL)\n        case \"$2\" in\n\n        HARD)\n                echo -n \"Triggering The calm resiliency alert\"\n                \/usr\/bin\/curl -k -H \"Content-Type: application\/json\" -u admin:+G47\/KtuznlLGv52ANaH1UnjVNO+vXICiOIxtJJpUsZ3Ar2i2HPiadtbURJQ35A5aS1evqy16fr\/poRGnhUIbw==  http:\/\/dev.calm.io\/externalalert\/resilience?instance_ip=$3\n                ;;\n        esac\n        ;;\nesac\nexit 0' | sudo tee \/usr\/lib\/nagios\/plugins\/calm_resilience_alert\nsudo chmod +x \/usr\/lib\/nagios\/plugins\/calm_resilience_alert\n\nsudo service nagios3 reload\n",
            "creation_time":1462174402,
            "credential_id":"572c61299acaaf5861311e57",
            "modification_time":1462528528,
            "version":114,
            "critical":false,
            "editables":[

            ],
            "name":"UpdateNagios"
        },
        {
            "uid":"572c61299acaaf5861311e98",
            "classification":"runshell",
            "script":"#!\/bin\/bash\nDATE=$(date -u \"+%F-%H%M%S\")\nFILE_NAME=\"$(\/usr\/bin\/ec2metadata --local-ipv4)-$DATE\"\nARCHIVE_NAME=\"$FILE_NAME.tar.gz\"\nrm -rf backup\nmkdir backup\nsudo mongo  admin --eval \"var databaseNames = db.getMongo().getDBNames(); for (var i in databaseNames) { printjson(db.getSiblingDB(databaseNames[i]).getCollectionNames()) }; printjson(db.fsyncLock());\"\nmongodump --out backup\/$FILE_NAME\nsudo mongo admin --eval \"printjson(db.fsyncUnlock());\"\ntar -C backup\/ -zcvf backup\/$ARCHIVE_NAME $FILE_NAME\/\nrm -r backup\/$FILE_NAME\ncat > \/tmp\/key.pem<<EOH\n-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEAsm4VnmS3h3qQ8TmYJxa\/MQzRddbWTu35Su+iKO5LhK8qWCEfFWtr+I1eVWJZ\n\/YgRuL5IP2ouOIQ3ptA88lwayfyFkQzapOVlR+v8yl+QQcKkKPjobdqWcGUl9xIF0R8JARaSS1\/2\n5vyfh5XtNYk0Mm+OEVx+ITx1DWyCtkiRFc2RkFybQqE2H+FmmlW8D+CZlFqp79VDgx0jJQksXsbc\njILjN6MbuDoBfWbsz0y8tMQP\/SYsFq1tlD8\/8+1xfz7OcK53GploHLXfY+0mWj16zN9Nnp+rv8MK\nv7wZEklNXyCrisbdVq7SuLBdcIbv06UsiatCWv+QbgyDxbJGPSji2wIDAQABAoIBAQCwPmiAQf++\nhGRywW72\/VLwwjaLbR\/Wat1ZFYZZY7eYYeUzk9O+NpM5uXm6YSF+ek726o02hk0NahwGW543zp5v\ncU0FT2sQgb4e4oyZ4Pb+3aGFDweWqtj6QA7WEylHvJ4KQx9R8IJS+qkhJgheXx39y47Ku0+iyLLe\nBZa\/MsKMgw137g9T92uUWdBVxDr8y1GuXrAXICJ5\/+DhB9yRFrRkMMZCudxzafemd\/1YNWKMSTbX\nYpaKw4C9hveskWZM\/Qtr44uvf5JazOBzoMt\/mLXpRCY0kWo6toWLo9JuDFhcIaOan5lfYrBPZDah\n3XklC+eMJccmu6a+91SFoxgr0+6BAoGBAPJuqVvfCVwuzudDaLENMJ96LEzbPH\/LBFZm8UU\/P44I\n+vQoVk6hw5yDiaN1+yTRZ8mam7UM0MijfHRP4Kxc9trOhHKacfMiorZHjhm2H73PSFaP5Lmb4P5U\nXVqEi9cNOudl+h51+5Q2+iUOI2mVmvxeftSgR8tPukZ0EhNSSLnhAoGBALxqdakxBq+etxhOkEel\noB\/3HB95yYz0ZVmuuQI9iAdLhUxaEOhGXAdP\/3yt7e7qVFhqbb8kZbrmhwczGdk83+tPJv1w\/rV3\nvZ3do0U9CJc7Ukx3ldEGAbNSFCTGG0XNbMFNo3uc\/Q4L0Fgz\/hFjcE168waZHbL21HG84JTOn4w7\nAoGBAMBluHyTzk7dSxDYO36\/tAXspLm+CA53ZRLZEcNeBadIUzlvxccTtDVDYvlaCZ1XnyGtVMNj\nz1JcBMoeFnVUNgjCevSkw6gspas5sHmRQzGVDpi8C86N+gp9k7ThmkVqV4QLN2vzQFyJIQ5FYS9L\nLrv4lnlSVofw1ylQtoOk+tihAoGAOeDqLAMnbqNu00SvBZNXUPpz5SdgRrB8wcPuiUWll7gXRpEU\nSIX0lzp33TEAuje5mT94XxMrPPK73\/ZOpnEQyBQUgh5H4C7cTLZdBVPuY6aRbXP+zarusssv7Ov+\nTL8B\/Y9\/\/OUIx1vRsIaoMWc+hE6UgR5gBS3VrOq8gnnGgSkCgYBPWngC26QLyV1pES7AlHjwXPTS\nIu\/2ID3Ki2N65HmckdkPpRM\/1FNGNVnW14tR18dt98cW77aFpvpGVqQKhKRBtP0huq5CcWW4+Yht\naBzMXZYZvQln+7IZytC6gTRbOtaddDV8QUrqFvnnujQ6vJEPsyw\/uIqSD7I4\/IAMXxhPrQ==\n-----END RSA PRIVATE KEY-----\nEOH\nchmod 400 \/tmp\/key.pem\nscp -r -i \/tmp\/key.pem  -o 'StrictHostKeyChecking no' backup\/$ARCHIVE_NAME $(echo @@{calm_array_private_ip_address}@@ | awk -F, '{print $1}'):@@{MONGO_BACKUP_PATH}@@\/\n",
            "creation_time":1462251317,
            "credential_id":"572c61299acaaf5861311e56",
            "modification_time":1462528528,
            "version":97,
            "critical":false,
            "editables":[

            ],
            "name":"Backup"
        },
        {
            "uid":"572c61299acaaf5861311e99",
            "classification":"runshell",
            "script":"#!\/bin\/bash\nDATE=$(date -u \"+%F-%H%M%S\")\nFILE_NAME=\"$(\/usr\/bin\/ec2metadata --local-ipv4)-$DATE\"\nARCHIVE_NAME=\"$FILE_NAME.tar.gz\"\nrm -rf backup\nmkdir backup\nsudo mongo  admin --eval \"var databaseNames = db.getMongo().getDBNames(); for (var i in databaseNames) { printjson(db.getSiblingDB(databaseNames[i]).getCollectionNames()) }; printjson(db.fsyncLock());\"\nmongodump --out backup\/$FILE_NAME\nsudo mongo admin --eval \"printjson(db.fsyncUnlock());\"\ntar -C backup\/ -zcvf backup\/$ARCHIVE_NAME $FILE_NAME\/\nrm -r backup\/$FILE_NAME\ncat > \/tmp\/key.pem<<EOH\n-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEAsm4VnmS3h3qQ8TmYJxa\/MQzRddbWTu35Su+iKO5LhK8qWCEfFWtr+I1eVWJZ\n\/YgRuL5IP2ouOIQ3ptA88lwayfyFkQzapOVlR+v8yl+QQcKkKPjobdqWcGUl9xIF0R8JARaSS1\/2\n5vyfh5XtNYk0Mm+OEVx+ITx1DWyCtkiRFc2RkFybQqE2H+FmmlW8D+CZlFqp79VDgx0jJQksXsbc\njILjN6MbuDoBfWbsz0y8tMQP\/SYsFq1tlD8\/8+1xfz7OcK53GploHLXfY+0mWj16zN9Nnp+rv8MK\nv7wZEklNXyCrisbdVq7SuLBdcIbv06UsiatCWv+QbgyDxbJGPSji2wIDAQABAoIBAQCwPmiAQf++\nhGRywW72\/VLwwjaLbR\/Wat1ZFYZZY7eYYeUzk9O+NpM5uXm6YSF+ek726o02hk0NahwGW543zp5v\ncU0FT2sQgb4e4oyZ4Pb+3aGFDweWqtj6QA7WEylHvJ4KQx9R8IJS+qkhJgheXx39y47Ku0+iyLLe\nBZa\/MsKMgw137g9T92uUWdBVxDr8y1GuXrAXICJ5\/+DhB9yRFrRkMMZCudxzafemd\/1YNWKMSTbX\nYpaKw4C9hveskWZM\/Qtr44uvf5JazOBzoMt\/mLXpRCY0kWo6toWLo9JuDFhcIaOan5lfYrBPZDah\n3XklC+eMJccmu6a+91SFoxgr0+6BAoGBAPJuqVvfCVwuzudDaLENMJ96LEzbPH\/LBFZm8UU\/P44I\n+vQoVk6hw5yDiaN1+yTRZ8mam7UM0MijfHRP4Kxc9trOhHKacfMiorZHjhm2H73PSFaP5Lmb4P5U\nXVqEi9cNOudl+h51+5Q2+iUOI2mVmvxeftSgR8tPukZ0EhNSSLnhAoGBALxqdakxBq+etxhOkEel\noB\/3HB95yYz0ZVmuuQI9iAdLhUxaEOhGXAdP\/3yt7e7qVFhqbb8kZbrmhwczGdk83+tPJv1w\/rV3\nvZ3do0U9CJc7Ukx3ldEGAbNSFCTGG0XNbMFNo3uc\/Q4L0Fgz\/hFjcE168waZHbL21HG84JTOn4w7\nAoGBAMBluHyTzk7dSxDYO36\/tAXspLm+CA53ZRLZEcNeBadIUzlvxccTtDVDYvlaCZ1XnyGtVMNj\nz1JcBMoeFnVUNgjCevSkw6gspas5sHmRQzGVDpi8C86N+gp9k7ThmkVqV4QLN2vzQFyJIQ5FYS9L\nLrv4lnlSVofw1ylQtoOk+tihAoGAOeDqLAMnbqNu00SvBZNXUPpz5SdgRrB8wcPuiUWll7gXRpEU\nSIX0lzp33TEAuje5mT94XxMrPPK73\/ZOpnEQyBQUgh5H4C7cTLZdBVPuY6aRbXP+zarusssv7Ov+\nTL8B\/Y9\/\/OUIx1vRsIaoMWc+hE6UgR5gBS3VrOq8gnnGgSkCgYBPWngC26QLyV1pES7AlHjwXPTS\nIu\/2ID3Ki2N65HmckdkPpRM\/1FNGNVnW14tR18dt98cW77aFpvpGVqQKhKRBtP0huq5CcWW4+Yht\naBzMXZYZvQln+7IZytC6gTRbOtaddDV8QUrqFvnnujQ6vJEPsyw\/uIqSD7I4\/IAMXxhPrQ==\n-----END RSA PRIVATE KEY-----\nEOH\nchmod 400 \/tmp\/key.pem\nscp -r -i \/tmp\/key.pem  -o 'StrictHostKeyChecking no' backup\/$ARCHIVE_NAME $(echo @@{CONFIG_IPS}@@ | awk -F, '{print $1}'):@@{MONGO_BACKUP_PATH}@@\/\n",
            "creation_time":1462251420,
            "credential_id":"572c61299acaaf5861311e56",
            "modification_time":1462528528,
            "version":96,
            "critical":false,
            "editables":[

            ],
            "name":"Backup"
        },
        {
            "uid":"572c61299acaaf5861311e9a",
            "classification":"runshell",
            "script":"#!\/bin\/bash\nlatest_backup=$(ssh -i \/tmp\/key.pem -o 'StrictHostKeyChecking no' $(echo @@{calm_array_private_ip_address}@@ | awk -F, '{print $1}') \"cd @@{MONGO_BACKUP_PATH}@@ ;ls -dt $(\/usr\/bin\/ec2metadata --local-ipv4)-*.tar.gz | head -1\")\nif [ $latest_backup = \"\" ];then\n  echo \"No backups available\"\n  exit 1\nfi\nhost_number=$(( @@{calm_array_index}@@ - $(($(( @@{calm_array_index}@@\/@@{NO_OF_REPLICASETS}@@ )) * @@{NO_OF_REPLICASETS}@@))))\nSTATUS=`sudo mongo  --quiet --eval \"rs.status()['members'][$host_number]['stateStr']\"`\nif [[ \"${STATUS}\" != \"PRIMARY\" ]];then\n  echo \"Not a Primary server\"\n  exit 0\nfi\nscp -i \/tmp\/key.pem -o 'StrictHostKeyChecking no' $(echo @@{calm_array_private_ip_address}@@ | awk -F, '{print $1}'):@@{MONGO_BACKUP_PATH}@@\/${latest_backup} \/tmp\/\nif [ ! -f \/tmp\/${latest_backup} ]; then\n    echo \"File ${latest_backup} not found!\"\nfi\ntar -zxvf \/tmp\/${latest_backup} -C \/tmp\/\nfilename=$(basename \"${latest_backup}\")\nfilename=\"${filename%.*.*}\"\nmongorestore \/tmp\/${filename}",
            "creation_time":1462257839,
            "credential_id":"572c61299acaaf5861311e56",
            "modification_time":1462528528,
            "version":93,
            "critical":false,
            "editables":[

            ],
            "name":"Restore"
        },
        {
            "uid":"572c61299acaaf5861311e9b",
            "classification":"runshell",
            "script":"#!\/bin\/bash\nlatest_backup=$(ssh -i \/tmp\/key.pem -o 'StrictHostKeyChecking no' $(echo @@{CONFIG_IPS}@@ | awk -F, '{print $1}') \"cd @@{MONGO_BACKUP_PATH}@@ ;ls -dt $(\/usr\/bin\/ec2metadata --local-ipv4)-*.tar.gz | head -1\")\nif [ $latest_backup = \"\" ];then\n  echo \"No backups available\"\n  exit 1\nfi\nhost_number=$(( @@{calm_array_index}@@ - $(($(( @@{calm_array_index}@@\/@@{NO_OF_REPLICASETS}@@ )) * @@{NO_OF_REPLICASETS}@@))))\nSTATUS=`sudo mongo  --quiet --eval \"rs.status()['members'][$host_number]['stateStr']\"`\nif [[ \"${STATUS}\" != \"PRIMARY\" ]];then\n  echo \"Not a Primary server\"\n  exit 0\nfi\nscp -i \/tmp\/key.pem -o 'StrictHostKeyChecking no' $(echo @@{CONFIG_IPS}@@ | awk -F, '{print $1}'):@@{MONGO_BACKUP_PATH}@@\/${latest_backup} \/tmp\/\nif [ ! -f \/tmp\/${latest_backup} ]; then\n    echo \"File ${latest_backup} not found!\"\nfi\ntar -zxvf \/tmp\/${latest_backup} -C \/tmp\/\nfilename=$(basename \"${latest_backup}\")\nfilename=\"${filename%.*.*}\"\nmongorestore \/tmp\/${filename}",
            "creation_time":1462257839,
            "credential_id":"572c61299acaaf5861311e56",
            "modification_time":1462528528,
            "version":93,
            "critical":false,
            "editables":[

            ],
            "name":"Restore"
        },
        {
            "uid":"572c61299acaaf5861311e9c",
            "classification":"runshell",
            "script":"#!\/bin\/bash\nif [[ \"@@{calm_array_index}@@\" != \"0\" ]];then\n  exit 0\nfi\n\neval $(mongo --port 27018 --quiet --eval 'db.adminCommand( { listShards: 1 } )' | python -c '\nimport json,sys\ndata=json.load(sys.stdin)\nprint \"HOST={}\".format(data[\"shards\"][len(data[\"shards\"])-1][\"host\"])\n')\neval $(mongo --port 27018 --quiet --eval 'db.adminCommand( { listShards: 1 } )' | python -c '\nimport json,sys\ndata=json.load(sys.stdin)\nprint \"HOSTTOMOVE={}\".format(data[\"shards\"][@@{SHARD_TO_MOVE}@@-1][\"host\"])\n')\nhost_state=`mongo --port 27018 --quiet --eval \"db.adminCommand({removeShard: '${HOST}'})['state']\"`\nif [[ \"$host_state\" == \"started\" ]] ; then\n  sleep 5\nfi\nhost_state=`mongo --port 27018 --quiet --eval \"db.adminCommand({removeShard: '${HOST}'})['state']\"`\nif [[ \"$host_state\" == \"ongoing\" ]] ; then\n  if [[ \"@@{SHARD_TO_MOVE}@@\" == \"\" ]] ; then\n    echo \"Please enter the shard number value to move tables.\"\n    exit 1\n  fi\n  dbstomove=`mongo --port 27018 --quiet --eval \"db.adminCommand({removeShard: '${HOST}'})['dbsToMove']\"`\n  eval $(echo $dbstomove | python -c 'import json,sys ; data=json.load(sys.stdin) ; print \"DBSTOMOVE={}\".format(\",\".join(data))')\n  for x in $(echo $DBSTOMOVE | tr \",\" \"\\n\") ; do\n     echo \"echo moving $x\"\n     mongo --port 27018 --quiet --eval \"db.adminCommand({ movePrimary: '$x', to: '${HOSTTOMOVE}' })\"\n  done\n  mongo --port 27018 --quiet --eval \"db.adminCommand({removeShard: '${HOST}'})\"\n  echo \"completed removing shard '${HOST}'\"\nelif [[ \"$host_state\" == \"completed\" ]] ; then\n  echo \"Host removal completed\"\nfi\n",
            "creation_time":1462337354,
            "credential_id":"572c61299acaaf5861311e56",
            "modification_time":1462528528,
            "version":83,
            "critical":false,
            "editables":[

            ],
            "name":"RemoveShard"
        },
        {
            "uid":"572c61299acaaf5861311e9d",
            "classification":"resource_action",
            "creation_time":1462337370,
            "action_type":"scale_down",
            "credential_id":null,
            "modification_time":1462528528,
            "version":82,
            "critical":true,
            "editables":[

            ],
            "scale_by":"@@{NO_OF_REPLICASETS}@@",
            "name":"Scale Down 1 - Data"
        },
        {
            "delay":0,
            "uid":"572c61299acaaf5861311e9e",
            "classification":"vmaction_aws_ec2",
            "creation_time":1462365054,
            "credential_id":"572c61299acaaf5861311e56",
            "modification_time":1462528528,
            "version":58,
            "critical":true,
            "editables":[

            ],
            "action":"start",
            "name":"AWS Action - Start"
        },
        {
            "delay":0,
            "uid":"572c61299acaaf5861311e9f",
            "classification":"vmaction_aws_ec2",
            "creation_time":1462365054,
            "credential_id":"572c61299acaaf5861311e56",
            "modification_time":1462528528,
            "version":58,
            "critical":true,
            "editables":[

            ],
            "action":"start",
            "name":"AWS Action - Start"
        },
        {
            "delay":0,
            "uid":"572c61299acaaf5861311ea0",
            "classification":"vmaction_aws_ec2",
            "creation_time":1462365105,
            "credential_id":"572c61299acaaf5861311e56",
            "modification_time":1462528528,
            "version":57,
            "critical":true,
            "editables":[

            ],
            "action":"stop",
            "name":"AWS Action - Stop"
        },
        {
            "delay":0,
            "uid":"572c61299acaaf5861311ea1",
            "classification":"vmaction_aws_ec2",
            "creation_time":1462365105,
            "credential_id":"572c61299acaaf5861311e56",
            "modification_time":1462528528,
            "version":57,
            "critical":true,
            "editables":[

            ],
            "action":"stop",
            "name":"AWS Action - Stop"
        },
        {
            "delay":0,
            "uid":"572c61299acaaf5861311ea2",
            "classification":"vmaction_aws_ec2",
            "creation_time":1462365122,
            "credential_id":"572c61299acaaf5861311e56",
            "modification_time":1462528528,
            "version":56,
            "critical":true,
            "editables":[

            ],
            "action":"restart",
            "name":"AWS Action - Restart"
        },
        {
            "delay":0,
            "uid":"572c61299acaaf5861311ea3",
            "classification":"vmaction_aws_ec2",
            "creation_time":1462365122,
            "credential_id":"572c61299acaaf5861311e56",
            "modification_time":1462528528,
            "version":56,
            "critical":true,
            "editables":[

            ],
            "action":"restart",
            "name":"AWS Action - Restart"
        },
        {
            "uid":"572c61299acaaf5861311ea4",
            "classification":"delete_aws_ec2",
            "creation_time":1462365138,
            "credential_id":null,
            "modification_time":1462528528,
            "version":55,
            "critical":true,
            "editables":[

            ],
            "name":"AWS Action - Delete"
        },
        {
            "uid":"572c61299acaaf5861311ea5",
            "classification":"delete_aws_ec2",
            "creation_time":1462365138,
            "credential_id":null,
            "modification_time":1462528528,
            "version":55,
            "critical":true,
            "editables":[

            ],
            "name":"AWS Action - Delete"
        },
        {
            "uid":"572c61299acaaf5861311ea6",
            "classification":"existing_machine_delete",
            "creation_time":1462365138,
            "credential_id":null,
            "modification_time":1462528528,
            "version":55,
            "critical":true,
            "editables":[

            ],
            "name":"unregister existing machine"
        },
        {
            "uid":"572c61299acaaf5861311ea7",
            "classification":"runshell",
            "script":"#!\/bin\/bash\nip_list=\"@@{CONFIG}@@,@@{DATA}@@\"\nips=$(echo $ip_list | tr \",\" \"\\n\")\nfor ip in $ips\ndo\n  sudo rm -rf \/etc\/nagios3\/conf.d\/$ip.cfg\ndone",
            "creation_time":1462365222,
            "credential_id":"572c61299acaaf5861311e57",
            "modification_time":1462528528,
            "version":54,
            "critical":false,
            "editables":[

            ],
            "name":"Deregister Mongo"
        },
        {
            "uid":"572c61299acaaf5861311ea8",
            "classification":"runshell",
            "script":"#!\/bin\/bash\nsudo service mongod stop",
            "creation_time":1462368151,
            "credential_id":"572c61299acaaf5861311e56",
            "modification_time":1462528528,
            "version":46,
            "critical":false,
            "editables":[

            ],
            "name":"Stop"
        },
        {
            "uid":"572c61299acaaf5861311ea9",
            "classification":"runshell",
            "script":"#!\/bin\/bash\nsudo service mongod stop",
            "creation_time":1462368151,
            "credential_id":"572c61299acaaf5861311e56",
            "modification_time":1462528528,
            "version":46,
            "critical":false,
            "editables":[

            ],
            "name":"Stop"
        },
        {
            "uid":"572c61299acaaf5861311eaa",
            "classification":"runshell",
            "script":"#!\/bin\/bash\nsudo service mongod start",
            "creation_time":1462368182,
            "credential_id":"572c61299acaaf5861311e56",
            "modification_time":1462528528,
            "version":45,
            "critical":false,
            "editables":[

            ],
            "name":"Start"
        },
        {
            "uid":"572c61299acaaf5861311eab",
            "classification":"runshell",
            "script":"#!\/bin\/bash\nsudo service mongod start",
            "creation_time":1462368182,
            "credential_id":"572c61299acaaf5861311e56",
            "modification_time":1462528528,
            "version":45,
            "critical":false,
            "editables":[

            ],
            "name":"Start"
        },
        {
            "uid":"572c61299acaaf5861311eac",
            "classification":"runshell",
            "script":"#!\/bin\/bash\ncat > \/tmp\/set-hostnames.py <<EOF\n#!\/usr\/bin\/python\nimport re\nconfig_ips=\"@@{calm_array_public_ip_address}@@\"\ndata_ips=\"@@{DATA_IPS}@@\"\n\nhostfile = open('\/etc\/hosts', 'r').read()\n\n# Remove all current mongodb references\nprint hostfile\nhostfile = re.sub('\\n#MONGODB-BEGIN.*?#MONGODB-END', '', hostfile, flags=re.DOTALL)\n\n# Add a placeholder for mongodb hosts\nhostfile += \"#MONGODB-BEGIN\\n\"\n\n# Loop through all global variables and substract all mongodb hosts and IPs\ncount=1\nfor ip in config_ips.split(','):\n  hostfile += ip + \" config\" + str(count) + \".mongodb\\n\"\n  count += 1\ncount=1\nfor ip in data_ips.split(','):\n  hostfile += ip + \" data\" + str(count) + \".mongodb\\n\"\n  count += 1\n# Close the list of mongodb hosts\nhostfile += \"#MONGODB-END\\n\"\n\n# Save the results back to the hosts file\nopen('\/etc\/hosts', 'w').write(hostfile)\nEOF\nsudo python \/tmp\/set-hostnames.py\n",
            "creation_time":1462513947,
            "credential_id":"572c61299acaaf5861311e56",
            "modification_time":1462528528,
            "version":32,
            "critical":false,
            "editables":[

            ],
            "name":"SetHostnames"
        },
        {
            "uid":"572c61299acaaf5861311ead",
            "classification":"runshell",
            "script":"#!\/bin\/bash\ncat > \/tmp\/set-hostnames.py <<EOF\n#!\/usr\/bin\/python\nimport re\nconfig_ips=\"@@{CONFIG_IPS}@@\"\ndata_ips=\"@@{calm_array_public_ip_address}@@\"\n\nhostfile = open('\/etc\/hosts', 'r').read()\n\n# Remove all current mongodb references\nprint hostfile\nhostfile = re.sub('\\n#MONGODB-BEGIN.*?#MONGODB-END', '', hostfile, flags=re.DOTALL)\n\n# Add a placeholder for mongodb hosts\nhostfile += \"#MONGODB-BEGIN\\n\"\n\n# Loop through all global variables and substract all mongodb hosts and IPs\ncount=1\nfor ip in config_ips.split(','):\n  hostfile += ip + \" config\" + str(count) + \".mongodb\\n\"\n  count += 1\ncount=1\nfor ip in data_ips.split(','):\n  hostfile += ip + \" data\" + str(count) + \".mongodb\\n\"\n  count += 1\n# Close the list of mongodb hosts\nhostfile += \"#MONGODB-END\\n\"\n\n# Save the results back to the hosts file\nopen('\/etc\/hosts', 'w').write(hostfile)\nEOF\nsudo python \/tmp\/set-hostnames.py\n",
            "creation_time":1462513947,
            "credential_id":"572c61299acaaf5861311e56",
            "modification_time":1462528528,
            "version":32,
            "critical":false,
            "editables":[

            ],
            "name":"SetHostnames"
        },
        {
            "uid":"572c61299acaaf5861311eae",
            "classification":"runshell",
            "script":"#!\/bin\/bash\ncat > \/tmp\/set-hostnames.py <<EOF\n#!\/usr\/bin\/python\nimport re\nconfig_ips=\"@@{CONFIG}@@\"\ndata_ips=\"@@{DATA}@@\"\n\nhostfile = open('\/etc\/hosts', 'r').read()\n\n# Remove all current mongodb references\nprint hostfile\nhostfile = re.sub('\\n#MONGODB-BEGIN.*?#MONGODB-END', '', hostfile, flags=re.DOTALL)\n\n# Add a placeholder for mongodb hosts\nhostfile += \"#MONGODB-BEGIN\\n\"\n\n# Loop through all global variables and substract all mongodb hosts and IPs\ncount=1\nfor ip in config_ips.split(','):\n  hostfile += ip + \" config\" + str(count) + \".mongodb\\n\"\n  count += 1\ncount=1\nfor ip in data_ips.split(','):\n  hostfile += ip + \" data\" + str(count) + \".mongodb\\n\"\n  count += 1\n# Close the list of mongodb hosts\nhostfile += \"#MONGODB-END\\n\"\n\n# Save the results back to the hosts file\nopen('\/etc\/hosts', 'w').write(hostfile)\nEOF\nsudo python \/tmp\/set-hostnames.py\n",
            "creation_time":1462514064,
            "credential_id":"572c61299acaaf5861311e57",
            "modification_time":1462528528,
            "version":31,
            "critical":false,
            "editables":[

            ],
            "name":"SetHostnames"
        },
        {
            "uid":"572c61299acaaf5861311eaf",
            "classification":"runshell",
            "script":"#!\/bin\/bash\nsudo apt-get install -y build-essential python-dev git python-pip\ngit clone https:\/\/github.com\/mzupan\/nagios-plugin-mongodb.git\ncd nagios-plugin-mongodb\ncat requirements | xargs sudo pip install\nsudo cp check_mongodb.py \/usr\/lib\/nagios\/plugins\/\necho \"define command {\n    command_name    check_mongodb\n    command_line    \/usr\/lib\/nagios\/plugins\/check_mongodb.py -H \\$HOSTADDRESS\\$ -A \\$ARG1\\$ -P \\$ARG2\\$ -W \\$ARG3$ -C \\$ARG4$\n}\n\ndefine command {\n    command_name    check_mongodb_database\n    command_line    \/usr\/lib\/nagios\/plugins\/check_mongodb.py -H \\$HOSTADDRESS\\$ -A \\$ARG1\\$ -P \\$ARG2\\$ -W \\$ARG3$ -C \\$ARG4$ -d \\$ARG5$\n}\n\ndefine command {\n    command_name    check_mongodb_collection\n    command_line    \/usr\/lib\/nagios\/plugins\/check_mongodb.py -H \\$HOSTADDRESS\\$ -A \\$ARG1\\$ -P \\$ARG2\\$ -W \\$ARG3$ -C \\$ARG4$ -d \\$ARG5$ -c \\$ARG6$\n}\n\ndefine command {\n    command_name    check_mongodb_replicaset\n    command_line    \/usr\/lib\/nagios\/plugins\/check_mongodb.py -H \\$HOSTADDRESS\\$ -A \\$ARG1\\$ -P \\$ARG2\\$ -W \\$ARG3$ -C \\$ARG4$ -r \\$ARG5$\n}\n\ndefine command {\n    command_name    check_mongodb_query\n    command_line    \/usr\/lib\/nagios\/plugins\/check_mongodb.py-H \\$HOSTADDRESS\\$ -A \\$ARG1\\$ -P \\$ARG2\\$ -W \\$ARG3$ -C \\$ARG4$ -q \\$ARG5$\n}\" | sudo tee \/etc\/nagios-plugins\/config\/check_mongodb.cfg\n\nip_list=\"@@{CONFIG}@@,@@{DATA}@@\"\n\necho \"define command{\n\tcommand_name    calm_resilience_alert\n\tcommand_line\t\/usr\/lib\/nagios\/plugins\/calm_resilience_alert  \\$SERVICESTATE$ \\$SERVICESTATETYPE$ \\$HOSTADDRESS$\n}\" | sudo tee \/etc\/nagios-plugins\/config\/calm_resilience_alert.cfg\n\necho \"define hostgroup{\n\thostgroup_name\t\tMongo Servers\n\talias\t\t\tMongo Servers\n\tmembers\t\t\t$ip_list\n\t}\ndefine service {\n      use                 generic-service\n      hostgroup_name          Mongo Servers\n      service_description     Mongo Connect Check\n      check_command           check_mongodb!connect!27017!2!4\n  }\ndefine service {\n      use                 generic-service\n      hostgroup_name          Mongo Servers\n      service_description     Mongo Free Connections\n      check_command           check_mongodb!connections!27017!70!80\n  }\ndefine service {\n    use                 generic-service\n    hostgroup_name          Mongo Servers\n    service_description     Mongo Replication Lag\n    check_command           check_mongodb!replication_lag!27017!15!30\n}\n\ndefine service {\n    use                 generic-service\n    hostgroup_name          Mongo Servers\n    service_description     Mongo Replication Lag Percentage\n    check_command           check_mongodb!replication_lag_percent!27017!50!75\n}\n\ndefine service {\n    use                 generic-service\n    hostgroup_name          Mongo Servers\n    service_description     Mongo Memory Usage\n    check_command           check_mongodb!memory!27017!20!28\n}\n\ndefine service {\n    use                 generic-service\n    hostgroup_name          Mongo Servers\n    service_description     Mongo Mapped Memory Usage\n    check_command           check_mongodb!memory_mapped!27017!20!28\n}\n\ndefine service {\n      use                     generic-service\n      hostgroup_name          Mongo Servers\n      service_description     MongoDB state\n      check_command           check_mongodb!replset_state!27017!0!0\n}\n\ndefine service {\n      use                     generic-service\n      hostgroup_name          Mongo Servers\n      service_description     MongoDB Index Miss Ratio\n      check_command           check_mongodb!index_miss_ratio!27017!.005!.01\n}\n\ndefine service {\n      use                     generic-service\n      hostgroup_name          Mongo Servers\n      service_description     MongoDB Number of databases\n      check_command           check_mongodb!databases!27017!300!500\n}\n\ndefine service {\n      use                     generic-service\n      hostgroup_name          Mongo Servers\n      service_description     MongoDB Number of collections\n      check_command           check_mongodb!collections!27017!300!500\n}\n\" | sudo tee \/etc\/nagios3\/conf.d\/mongo_services.cfg\n\n\nips=$(echo $ip_list | tr \",\" \"\\n\")\nfor ip in $ips\ndo\n    echo \"define host{\n            use                     generic-host\n            host_name               $ip\n            alias                   $ip\n            address                 $ip\n            notification_period     24x7\n            max_check_attempts      5\n            }\n\n    define service{\n            use                             generic-service\n            host_name                       $ip\n            service_description             PING\n            check_command            check_ping!100.0,20%!500.0,60%\n            notification_period     24x7\n            event_handler                   calm_resilience_alert\n            }\n\n    define service{\n            use                             generic-service\n            host_name                       $ip\n            service_description             SSH\n            check_command            check_ssh\n            notification_period     24x7\n            }\n\n    define service{\n            use                             generic-service\n            host_name                       $ip\n            service_description             CPUload\n            max_check_attempts              5\n            check_command            check_nrpe_1arg!check_load\n            notification_period     24x7\n            }\" | sudo tee \/etc\/nagios3\/conf.d\/$ip.cfg\ndone\necho 'case \"$1\" in\nOK)\n        # The service just came back up, so dont do anything...\n        ;;\nWARNING)\n        # We dont really care about warning states, since the service is probably still running...\n        ;;\nUNKNOWN)\n        ;;\nCRITICAL)\n        case \"$2\" in\n\n        HARD)\n                echo -n \"Triggering The calm resiliency alert\"\n                \/usr\/bin\/curl -k -H \"Content-Type: application\/json\" -u admin:+G47\/KtuznlLGv52ANaH1UnjVNO+vXICiOIxtJJpUsZ3Ar2i2HPiadtbURJQ35A5aS1evqy16fr\/poRGnhUIbw==  http:\/\/dev.calm.io\/externalalert\/resilience?instance_ip=$3\n                ;;\n        esac\n        ;;\nesac\nexit 0' | sudo tee \/usr\/lib\/nagios\/plugins\/calm_resilience_alert\nsudo chmod +x \/usr\/lib\/nagios\/plugins\/calm_resilience_alert\n\nsudo service nagios3 reload\n",
            "creation_time":1462514104,
            "credential_id":"572c61299acaaf5861311e57",
            "modification_time":1462528528,
            "version":24,
            "critical":false,
            "editables":[

            ],
            "name":"UpdateNagios"
        }
    ],
    "uid":"572c61299acaaf5861311e53",
    "classification":"blueprint",
    "autoscale_config":{
        "post_flow":null,
        "cool_down_period":"1800",
        "uid":"5726ff960807a3bea1cd2431",
        "classification":null,
        "alert_count":"1",
        "max_count":"1",
        "pre_flow":null,
        "min_count":"1",
        "listen_for":"external",
        "scale_by":"1",
        "alert_window":"1800"
    },
    "cost":0.0,
    "strategy_enabled":false,
    "environment":"default",
    "provider":null,
    "config":{
        "setup":[

        ],
        "uid":"5726ff960807a3bea1cd2432",
        "classification":null,
        "deploy":[

        ]
    },
    "calm-version":"1.7.0",
    "description":null,
    "parent":null,
    "flows":[
        {
            "tasks":[
                {
                    "task_id":"572c61299acaaf5861311e84",
                    "rc_id":"cid:00000001",
                    "uid":"572703520807a3bea1cd3e6c",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311e86",
                    "rc_id":"cid:00000001",
                    "uid":"572703520807a3bea1cd3e6e",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311e88",
                    "rc_id":"cid:00000001",
                    "uid":"572703520807a3bea1cd3e70",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311e89",
                    "rc_id":"cid:00000001",
                    "uid":"572703520807a3bea1cd3e72",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311e87",
                    "rc_id":"cid:00000001",
                    "uid":"572703520807a3bea1cd3e74",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311e8a",
                    "rc_id":"cid:00000001",
                    "uid":"572703520807a3bea1cd3e76",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311e85",
                    "rc_id":"cid:00000002",
                    "uid":"572703520807a3bea1cd3e83",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311e8b",
                    "rc_id":"cid:00000002",
                    "uid":"572703520807a3bea1cd3e85",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311e8c",
                    "rc_id":"cid:00000002",
                    "uid":"572703520807a3bea1cd3e87",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311e8d",
                    "rc_id":"cid:00000002",
                    "uid":"572703520807a3bea1cd3e89",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311e8e",
                    "rc_id":"cid:00000002",
                    "uid":"572703520807a3bea1cd3e8b",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311e8f",
                    "rc_id":"cid:00000003",
                    "uid":"572703520807a3bea1cd3e91",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311e90",
                    "rc_id":"cid:00000003",
                    "uid":"572703520807a3bea1cd3e93",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311e91",
                    "rc_id":"cid:00000003",
                    "uid":"572703520807a3bea1cd3e95",
                    "classification":null
                }
            ],
            "uid":"cid:00000004",
            "classification":null,
            "eta":-1,
            "creation_time":1462174582,
            "edges":[
                {
                    "dest":"572703520807a3bea1cd3e6e",
                    "src":"572703520807a3bea1cd3e6c",
                    "uid":"572703520807a3bea1cd3e77",
                    "classification":null
                },
                {
                    "dest":"572703520807a3bea1cd3e70",
                    "src":"572703520807a3bea1cd3e6e",
                    "uid":"572703520807a3bea1cd3e78",
                    "classification":null
                },
                {
                    "dest":"572703520807a3bea1cd3e72",
                    "src":"572703520807a3bea1cd3e70",
                    "uid":"572703520807a3bea1cd3e79",
                    "classification":null
                },
                {
                    "dest":"572703520807a3bea1cd3e74",
                    "src":"572703520807a3bea1cd3e72",
                    "uid":"572703520807a3bea1cd3e7a",
                    "classification":null
                },
                {
                    "dest":"572703520807a3bea1cd3e85",
                    "src":"572703520807a3bea1cd3e83",
                    "uid":"572703520807a3bea1cd3e8c",
                    "classification":null
                },
                {
                    "dest":"572703520807a3bea1cd3e87",
                    "src":"572703520807a3bea1cd3e85",
                    "uid":"572703520807a3bea1cd3e8d",
                    "classification":null
                },
                {
                    "dest":"572703520807a3bea1cd3e89",
                    "src":"572703520807a3bea1cd3e87",
                    "uid":"572703520807a3bea1cd3e8e",
                    "classification":null
                },
                {
                    "dest":"572703520807a3bea1cd3e93",
                    "src":"572703520807a3bea1cd3e91",
                    "uid":"572703520807a3bea1cd3e96",
                    "classification":null
                },
                {
                    "dest":"572703520807a3bea1cd3e95",
                    "src":"572703520807a3bea1cd3e93",
                    "uid":"572703520807a3bea1cd3e97",
                    "classification":null
                },
                {
                    "dest":"572703520807a3bea1cd3e93",
                    "src":"572703520807a3bea1cd3e76",
                    "uid":"572703520807a3bea1cd3eac",
                    "classification":null
                },
                {
                    "dest":"572703520807a3bea1cd3e93",
                    "src":"572703520807a3bea1cd3e8b",
                    "uid":"572703520807a3bea1cd3eb7",
                    "classification":null
                },
                {
                    "dest":"572703520807a3bea1cd3e85",
                    "src":"572703520807a3bea1cd3e6c",
                    "uid":"572703760807a3bea1cd3f07",
                    "classification":null
                },
                {
                    "dest":"572703520807a3bea1cd3e6e",
                    "src":"572703520807a3bea1cd3e83",
                    "uid":"572703760807a3bea1cd3f08",
                    "classification":null
                },
                {
                    "dest":"572703520807a3bea1cd3e74",
                    "src":"572703520807a3bea1cd3e89",
                    "uid":"572703ad0807a3bea1cd40fc",
                    "classification":null
                },
                {
                    "dest":"572703520807a3bea1cd3e8b",
                    "src":"572703520807a3bea1cd3e87",
                    "uid":"572703c80807a3bea1cd41f6",
                    "classification":null
                },
                {
                    "dest":"572703520807a3bea1cd3e76",
                    "src":"572703520807a3bea1cd3e70",
                    "uid":"572703c80807a3bea1cd41f7",
                    "classification":null
                }
            ],
            "has_critical_tasks":true,
            "modification_time":1462528528,
            "version":0,
            "flow_type":"ACTION",
            "critical":true,
            "name":"create-action"
        },
        {
            "tasks":[
                {
                    "task_id":"572c61299acaaf5861311e98",
                    "rc_id":"cid:00000001",
                    "uid":"57282f350807a31866211332",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311e99",
                    "rc_id":"cid:00000002",
                    "uid":"57282f9c0807a31866211435",
                    "classification":null
                }
            ],
            "uid":"cid:00000005",
            "classification":null,
            "eta":-1,
            "creation_time":1462251317,
            "edges":[

            ],
            "has_critical_tasks":false,
            "modification_time":1462528528,
            "version":0,
            "flow_type":null,
            "critical":false,
            "name":"Backup"
        },
        {
            "tasks":[
                {
                    "task_id":"572c61299acaaf5861311ea8",
                    "rc_id":"cid:00000001",
                    "uid":"5729f7979acaaf64959993af",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311ea9",
                    "rc_id":"cid:00000002",
                    "uid":"5729f7979acaaf64959993b1",
                    "classification":null
                }
            ],
            "uid":"cid:00000006",
            "classification":null,
            "eta":-1,
            "creation_time":1462368151,
            "edges":[

            ],
            "has_critical_tasks":false,
            "modification_time":1462528528,
            "version":0,
            "flow_type":null,
            "critical":false,
            "name":"StopService"
        },
        {
            "tasks":[
                {
                    "task_id":"572c61299acaaf5861311e9c",
                    "rc_id":"cid:00000001",
                    "uid":"57297f4a9acaaf59f5a76287",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311e9d",
                    "rc_id":"cid:00000002",
                    "uid":"57297f599acaaf5a18bb2c1a",
                    "classification":null
                }
            ],
            "uid":"cid:00000007",
            "classification":null,
            "eta":-1,
            "creation_time":1462337354,
            "edges":[
                {
                    "dest":"57297f599acaaf5a18bb2c1a",
                    "src":"57297f4a9acaaf59f5a76287",
                    "uid":"57297f599acaaf5a18bb2c1b",
                    "classification":null
                }
            ],
            "has_critical_tasks":true,
            "modification_time":1462528528,
            "version":0,
            "flow_type":null,
            "critical":true,
            "name":"ScaleDown"
        },
        {
            "tasks":[
                {
                    "task_id":"572c61299acaaf5861311ea4",
                    "rc_id":"cid:00000001",
                    "uid":"5729ebd29acaaf6379443872",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311ea5",
                    "rc_id":"cid:00000002",
                    "uid":"5729ebd29acaaf637944387a",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311ea6",
                    "rc_id":"cid:00000003",
                    "uid":"5729ebd29acaaf637944387c",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311ea7",
                    "rc_id":"cid:00000003",
                    "uid":"5729ec259acaaf63794438e9",
                    "classification":null
                }
            ],
            "uid":"cid:00000008",
            "classification":null,
            "eta":-1,
            "creation_time":1462365222,
            "edges":[
                {
                    "dest":"5729ebd29acaaf6379443872",
                    "src":"5729ec259acaaf63794438e9",
                    "uid":"5729ec259acaaf63794438ea",
                    "classification":null
                },
                {
                    "dest":"5729ebd29acaaf637944387a",
                    "src":"5729ec259acaaf63794438e9",
                    "uid":"5729ec259acaaf63794438eb",
                    "classification":null
                }
            ],
            "has_critical_tasks":true,
            "modification_time":1462528528,
            "version":0,
            "flow_type":"ACTION",
            "critical":true,
            "name":"delete-action"
        },
        {
            "tasks":[
                {
                    "task_id":"572c61299acaaf5861311e92",
                    "rc_id":"cid:00000002",
                    "uid":"5727020d0807a3bea1cd3649",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311e93",
                    "rc_id":"cid:00000001",
                    "uid":"572702420807a3fe77e4c2ee",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311e94",
                    "rc_id":"cid:00000002",
                    "uid":"572702420807a3fe77e4c2f0",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311e95",
                    "rc_id":"cid:00000002",
                    "uid":"5727028a0807a3bea1cd38f2",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311e96",
                    "rc_id":"cid:00000003",
                    "uid":"5727029f0807a3bea1cd39d0",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311e97",
                    "rc_id":"cid:00000003",
                    "uid":"572702c20807a3bea1cd3ba3",
                    "classification":null
                }
            ],
            "uid":"cid:00000009",
            "classification":null,
            "eta":-1,
            "creation_time":1462174221,
            "edges":[
                {
                    "dest":"572702420807a3fe77e4c2ee",
                    "src":"5727020d0807a3bea1cd3649",
                    "uid":"572702420807a3fe77e4c2f1",
                    "classification":null
                },
                {
                    "dest":"572702420807a3fe77e4c2f0",
                    "src":"5727020d0807a3bea1cd3649",
                    "uid":"572702600807a3bea1cd3810",
                    "classification":null
                },
                {
                    "dest":"5727029f0807a3bea1cd39d0",
                    "src":"5727028a0807a3bea1cd38f2",
                    "uid":"5727029f0807a3bea1cd39d1",
                    "classification":null
                },
                {
                    "dest":"5727028a0807a3bea1cd38f2",
                    "src":"572702420807a3fe77e4c2f0",
                    "uid":"572702a80807a3bea1cd3ab2",
                    "classification":null
                },
                {
                    "dest":"572702c20807a3bea1cd3ba3",
                    "src":"5727029f0807a3bea1cd39d0",
                    "uid":"572702c20807a3bea1cd3ba4",
                    "classification":null
                }
            ],
            "has_critical_tasks":true,
            "modification_time":1462528528,
            "version":0,
            "flow_type":null,
            "critical":true,
            "name":"ScaleUp"
        },
        {
            "tasks":[
                {
                    "task_id":"572c61299acaaf5861311ea0",
                    "rc_id":"cid:00000001",
                    "uid":"5729ebb19acaaf64959985d2",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311ea1",
                    "rc_id":"cid:00000002",
                    "uid":"5729ebb19acaaf64959985da",
                    "classification":null
                }
            ],
            "uid":"cid:00000010",
            "classification":null,
            "eta":-1,
            "creation_time":1462365119,
            "edges":[

            ],
            "has_critical_tasks":true,
            "modification_time":1462528528,
            "version":0,
            "flow_type":"ACTION",
            "critical":true,
            "name":"stop-action"
        },
        {
            "tasks":[
                {
                    "task_id":"572c61299acaaf5861311eac",
                    "rc_id":"cid:00000001",
                    "uid":"572c311a9acaaf669a935508",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311ead",
                    "rc_id":"cid:00000002",
                    "uid":"572c311a9acaaf669a93550a",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311eae",
                    "rc_id":"cid:00000003",
                    "uid":"572c311a9acaaf669a93550c",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311eaf",
                    "rc_id":"cid:00000003",
                    "uid":"572c31b89acaaf669a935dcc",
                    "classification":null
                }
            ],
            "uid":"cid:00000011",
            "classification":null,
            "eta":-1,
            "creation_time":1462513947,
            "edges":[
                {
                    "dest":"572c311a9acaaf669a93550c",
                    "src":"572c311a9acaaf669a935508",
                    "uid":"572c31999acaaf669a935ae9",
                    "classification":null
                },
                {
                    "dest":"572c311a9acaaf669a93550c",
                    "src":"572c311a9acaaf669a93550a",
                    "uid":"572c319e9acaaf669a935c5a",
                    "classification":null
                },
                {
                    "dest":"572c31b89acaaf669a935dcc",
                    "src":"572c311a9acaaf669a93550c",
                    "uid":"572c31bd9acaaf669a935f40",
                    "classification":null
                }
            ],
            "has_critical_tasks":false,
            "modification_time":1462528528,
            "version":0,
            "flow_type":null,
            "critical":false,
            "name":"Resilience-Postflow"
        },
        {
            "tasks":[
                {
                    "task_id":"572c61299acaaf5861311eaa",
                    "rc_id":"cid:00000001",
                    "uid":"5729f7b69acaaf63794451d6",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311eab",
                    "rc_id":"cid:00000002",
                    "uid":"5729f7b69acaaf63794451d8",
                    "classification":null
                }
            ],
            "uid":"cid:00000012",
            "classification":null,
            "eta":-1,
            "creation_time":1462368182,
            "edges":[

            ],
            "has_critical_tasks":false,
            "modification_time":1462528528,
            "version":0,
            "flow_type":null,
            "critical":false,
            "name":"StartService"
        },
        {
            "tasks":[
                {
                    "task_id":"572c61299acaaf5861311e9a",
                    "rc_id":"cid:00000001",
                    "uid":"572848af0807a3d2cdc25dea",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311e9b",
                    "rc_id":"cid:00000002",
                    "uid":"572848af0807a3d2cdc25dec",
                    "classification":null
                }
            ],
            "uid":"cid:00000013",
            "classification":null,
            "eta":-1,
            "creation_time":1462257839,
            "edges":[

            ],
            "has_critical_tasks":false,
            "modification_time":1462528528,
            "version":0,
            "flow_type":null,
            "critical":false,
            "name":"Restore"
        },
        {
            "tasks":[
                {
                    "task_id":"572c61299acaaf5861311e9e",
                    "rc_id":"cid:00000001",
                    "uid":"5729eb7e9acaaf6379443382",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311e9f",
                    "rc_id":"cid:00000002",
                    "uid":"5729eb7e9acaaf637944338a",
                    "classification":null
                }
            ],
            "uid":"cid:00000014",
            "classification":null,
            "eta":-1,
            "creation_time":1462365102,
            "edges":[

            ],
            "has_critical_tasks":true,
            "modification_time":1462528528,
            "version":0,
            "flow_type":"ACTION",
            "critical":true,
            "name":"start-action"
        },
        {
            "tasks":[
                {
                    "task_id":"572c61299acaaf5861311ea2",
                    "rc_id":"cid:00000001",
                    "uid":"5729ebc29acaaf6379443691",
                    "classification":null
                },
                {
                    "task_id":"572c61299acaaf5861311ea3",
                    "rc_id":"cid:00000002",
                    "uid":"5729ebc29acaaf6379443699",
                    "classification":null
                }
            ],
            "uid":"cid:00000015",
            "classification":null,
            "eta":-1,
            "creation_time":1462365134,
            "edges":[

            ],
            "has_critical_tasks":true,
            "modification_time":1462528528,
            "version":0,
            "flow_type":"ACTION",
            "critical":true,
            "name":"restart-action"
        }
    ],
    "dependencies":[

    ],
    "credentials":[
        {
            "username":"ubuntu",
            "public_key":null,
            "uid":"572c61299acaaf5861311e56",
            "classification":null,
            "secret_type":"ssh_key",
            "creation_time":1462173737,
            "modification_time":1462528528,
            "secret":null,
            "version":135,
            "name":"MONGO"
        },
        {
            "username":"ubuntu",
            "public_key":null,
            "uid":"572c61299acaaf5861311e57",
            "classification":null,
            "secret_type":"ssh_key",
            "creation_time":1462174144,
            "modification_time":1462528528,
            "secret":null,
            "version":124,
            "name":"Nagios"
        }
    ],
    "bp_id":null,
    "properties":[
        {
            "uid":"5726fffc0807a3bea1cd2cba",
            "classification":null,
            "editable":true,
            "value":"3",
            "key":"NO_OF_REPLICASETS",
            "property_description":null,
            "property_type":"EXTERNAL",
            "setter":null
        },
        {
            "uid":"5726fffc0807a3bea1cd2cbb",
            "classification":null,
            "editable":true,
            "value":"2",
            "key":"NO_OF_SHARDS",
            "property_description":null,
            "property_type":"EXTERNAL",
            "setter":null
        },
        {
            "uid":"5726fffc0807a3bea1cd2cbc",
            "classification":null,
            "editable":true,
            "value":"172.0.1.233",
            "key":"Nagios",
            "property_description":null,
            "property_type":"EXTERNAL",
            "setter":null
        },
        {
            "uid":"5729eb159acaaf6495998353",
            "classification":null,
            "editable":true,
            "value":"6",
            "key":"NO_OF_DATASETS",
            "property_description":null,
            "property_type":"EXTERNAL",
            "setter":null
        },
        {
            "uid":"5729eb159acaaf6495998354",
            "classification":null,
            "editable":true,
            "value":null,
            "key":"SHARD_TO_MOVE",
            "property_description":null,
            "property_type":"EXTERNAL",
            "setter":null
        },
        {
            "uid":"5729ecbd9acaaf6379443c33",
            "classification":null,
            "editable":false,
            "value":"mongo_backups",
            "key":"MONGO_BACKUP_PATH",
            "property_description":null,
            "property_type":"EXTERNAL",
            "setter":null
        }
    ],
    "autoscale_enabled":false,
    "name":"MongoSharding-Aws-Resilience",
    "setup_ids":{

    },
    "h":0.0,
    "resiliency_config":{
        "post_flow":null,
        "cool_down_period":"1800",
        "alert_window":"1800",
        "classification":null,
        "alert_count":"1",
        "pre_flow":null,
        "listen_for":"internal",
        "uid":"5726ff960807a3bea1cd2433"
    },
    "resiliency_enabled":false,
    "architecture":[
        {
            "tasks":[

            ],
            "uid":"cid:00000001",
            "classification":"compute",
            "address":"@@{public_ip_address}@@",
            "credential_id":null,
            "autoscale_config":{
                "post_flow":null,
                "cool_down_period":"1800",
                "uid":"5726fffc0807a3bea1cd2cd2",
                "classification":null,
                "alert_count":"1",
                "max_count":"1",
                "pre_flow":null,
                "min_count":"1",
                "listen_for":"external",
                "scale_by":"1",
                "alert_window":"1800"
            },
            "cost":5.0,
            "strategy_enabled":false,
            "provider":"572c61299acaaf5861311e84",
            "service_type":"ssh",
            "config":{
                "setup":[

                ],
                "uid":"5726fffc0807a3bea1cd2cd5",
                "classification":null,
                "deploy":[
                    "572c61299acaaf5861311e86",
                    "572c61299acaaf5861311e88",
                    "572c61299acaaf5861311e89",
                    "572c61299acaaf5861311e87",
                    "572c61299acaaf5861311e8a"
                ]
            },
            "parent":"572c61299acaaf5861311eb0",
            "array_data":{
                "tasks":[

                ],
                "uid":"572c61299acaaf5861311eb1",
                "classification":"array",
                "creation_time":1462173736,
                "policy_rules":[

                ],
                "autoscale_config":{
                    "post_flow":null,
                    "cool_down_period":"1800",
                    "uid":"572700280807a3bea1cd2d8c",
                    "classification":null,
                    "alert_count":"1",
                    "max_count":"1",
                    "pre_flow":null,
                    "min_count":"1",
                    "listen_for":"external",
                    "scale_by":"1",
                    "alert_window":"1800"
                },
                "cost":0.0,
                "strategy_enabled":false,
                "version":136,
                "scale_down_task":null,
                "provider":null,
                "config":{
                    "scale_up":[

                    ],
                    "scale_down":[

                    ],
                    "uid":"572700280807a3bea1cd2d8f",
                    "classification":null
                },
                "parent":"572c61299acaaf5861311e53",
                "scale_up_task":null,
                "flows":[

                ],
                "modification_time":1462528528,
                "bp_id":"572c61299acaaf5861311e53",
                "properties":[

                ],
                "count":"@@{NO_OF_REPLICASETS}@@",
                "autoscale_enabled":false,
                "name":"Configset (Array)",
                "h":0.0,
                "resiliency_config":{
                    "post_flow":null,
                    "cool_down_period":"1800",
                    "alert_window":"1800",
                    "classification":null,
                    "alert_count":"1",
                    "pre_flow":null,
                    "listen_for":"internal",
                    "uid":"572700280807a3bea1cd2d8d"
                },
                "resiliency_enabled":false,
                "w":0.0,
                "strategy_config":{
                    "post_flow":null,
                    "rollback_pre_flow":null,
                    "classification":null,
                    "rolling_factor":"100",
                    "initial_version":null,
                    "approval_flag":false,
                    "upgrade_flow":null,
                    "rollback_flow":null,
                    "pre_flow":null,
                    "rollback_post_flow":null,
                    "upgrade_type":"rolling_upgrade",
                    "uid":"572700280807a3bea1cd2d8e",
                    "users":[

                    ],
                    "teams":[

                    ],
                    "emails":[

                    ],
                    "initial_count":"1"
                },
                "y":0.0,
                "x":0.0
            },
            "flows":[

            ],
            "dependencies":[
                {
                    "key":"DATA_IPS",
                    "uid":"572701fe0807a3bea1cd3563",
                    "classification":null,
                    "setter":{
                        "source_id":"cid:00000002",
                        "prop_id":"572701fe0807a3bea1cd3562",
                        "uid":"572701fe0807a3bea1cd35ab",
                        "classification":null
                    }
                }
            ],
            "service_port":22,
            "bp_id":"572c61299acaaf5861311e53",
            "properties":[
                {
                    "uid":"572700f10807a3bea1cd3082",
                    "classification":null,
                    "editable":false,
                    "value":null,
                    "key":"CONFIG_IPS",
                    "property_description":null,
                    "property_type":"EXTERNAL",
                    "setter":{
                        "source_id":"572c61299acaaf5861311e84",
                        "uid":"572c616b9acaaf5861312339",
                        "classification":null,
                        "prop":"public_ip_address"
                    }
                }
            ],
            "autoscale_enabled":false,
            "name":"Configset",
            "h":0.0,
            "resiliency_config":{
                "post_flow":"Resilience-Postflow",
                "cool_down_period":"1200",
                "alert_window":"600",
                "classification":null,
                "alert_count":"1",
                "pre_flow":null,
                "listen_for":"external",
                "uid":"572acb7c9acaaf3008d16d27"
            },
            "resiliency_enabled":true,
            "w":0.0,
            "strategy_config":{
                "post_flow":null,
                "rollback_pre_flow":null,
                "classification":null,
                "rolling_factor":"100",
                "initial_version":null,
                "approval_flag":false,
                "upgrade_flow":null,
                "rollback_flow":null,
                "pre_flow":null,
                "rollback_post_flow":null,
                "upgrade_type":"rolling_upgrade",
                "uid":"5726fffc0807a3bea1cd2cd4",
                "users":[

                ],
                "teams":[

                ],
                "emails":[

                ],
                "initial_count":"1"
            },
            "y":111.9073028564,
            "x":-93.8165626526,
            "os_type":"Linux"
        },
        {
            "tasks":[

            ],
            "uid":"cid:00000002",
            "classification":"compute",
            "address":"@@{public_ip_address}@@",
            "credential_id":null,
            "autoscale_config":{
                "post_flow":null,
                "cool_down_period":"1800",
                "uid":"5726fffc0807a3bea1cd2cd7",
                "classification":null,
                "alert_count":"1",
                "max_count":"1",
                "pre_flow":null,
                "min_count":"1",
                "listen_for":"external",
                "scale_by":"1",
                "alert_window":"1800"
            },
            "cost":6.0,
            "strategy_enabled":false,
            "provider":"572c61299acaaf5861311e85",
            "service_type":"ssh",
            "config":{
                "setup":[

                ],
                "uid":"5726fffc0807a3bea1cd2cda",
                "classification":null,
                "deploy":[
                    "572c61299acaaf5861311e8b",
                    "572c61299acaaf5861311e8c",
                    "572c61299acaaf5861311e8d",
                    "572c61299acaaf5861311e8e"
                ]
            },
            "parent":"572c61299acaaf5861311eb2",
            "array_data":{
                "tasks":[

                ],
                "uid":"572c61299acaaf5861311eb3",
                "classification":"array",
                "creation_time":1462173986,
                "policy_rules":[

                ],
                "autoscale_config":{
                    "post_flow":null,
                    "cool_down_period":"1800",
                    "uid":"572701220807a3bea1cd315c",
                    "classification":null,
                    "alert_count":"1",
                    "max_count":"1",
                    "pre_flow":null,
                    "min_count":"1",
                    "listen_for":"external",
                    "scale_by":"1",
                    "alert_window":"1800"
                },
                "cost":0.0,
                "strategy_enabled":false,
                "version":129,
                "scale_down_task":null,
                "provider":null,
                "config":{
                    "scale_up":[

                    ],
                    "scale_down":[

                    ],
                    "uid":"572701220807a3bea1cd315f",
                    "classification":null
                },
                "parent":"572c61299acaaf5861311e53",
                "scale_up_task":null,
                "flows":[

                ],
                "modification_time":1462528528,
                "bp_id":"572c61299acaaf5861311e53",
                "properties":[

                ],
                "count":"@@{NO_OF_DATASETS}@@",
                "autoscale_enabled":false,
                "name":"Dataset (Array)",
                "h":0.0,
                "resiliency_config":{
                    "post_flow":null,
                    "cool_down_period":"1800",
                    "alert_window":"1800",
                    "classification":null,
                    "alert_count":"1",
                    "pre_flow":null,
                    "listen_for":"internal",
                    "uid":"572701220807a3bea1cd315d"
                },
                "resiliency_enabled":false,
                "w":0.0,
                "strategy_config":{
                    "post_flow":null,
                    "rollback_pre_flow":null,
                    "classification":null,
                    "rolling_factor":"100",
                    "initial_version":null,
                    "approval_flag":false,
                    "upgrade_flow":null,
                    "rollback_flow":null,
                    "pre_flow":null,
                    "rollback_post_flow":null,
                    "upgrade_type":"rolling_upgrade",
                    "uid":"572701220807a3bea1cd315e",
                    "users":[

                    ],
                    "teams":[

                    ],
                    "emails":[

                    ],
                    "initial_count":"1"
                },
                "y":0.0,
                "x":0.0
            },
            "flows":[

            ],
            "dependencies":[
                {
                    "key":"CONFIG_IPS",
                    "uid":"572701fe0807a3bea1cd3564",
                    "classification":null,
                    "setter":{
                        "source_id":"cid:00000001",
                        "prop_id":"572700f10807a3bea1cd3082",
                        "uid":"572701fe0807a3bea1cd35b7",
                        "classification":null
                    }
                }
            ],
            "service_port":22,
            "bp_id":"572c61299acaaf5861311e53",
            "properties":[
                {
                    "uid":"572701fe0807a3bea1cd3562",
                    "classification":null,
                    "editable":false,
                    "value":null,
                    "key":"DATA_IPS",
                    "property_description":null,
                    "property_type":"EXTERNAL",
                    "setter":{
                        "source_id":"572c61299acaaf5861311e85",
                        "uid":"572c61759acaaf58613124ba",
                        "classification":null,
                        "prop":"public_ip_address"
                    }
                }
            ],
            "autoscale_enabled":false,
            "name":"Dataset",
            "h":0.0,
            "resiliency_config":{
                "post_flow":"Resilience-Postflow",
                "cool_down_period":"1200",
                "alert_window":"600",
                "classification":null,
                "alert_count":"1",
                "pre_flow":null,
                "listen_for":"external",
                "uid":"572acb759acaaf3009cd97e7"
            },
            "resiliency_enabled":true,
            "w":0.0,
            "strategy_config":{
                "post_flow":null,
                "rollback_pre_flow":null,
                "classification":null,
                "rolling_factor":"100",
                "initial_version":null,
                "approval_flag":false,
                "upgrade_flow":null,
                "rollback_flow":null,
                "pre_flow":null,
                "rollback_post_flow":null,
                "upgrade_type":"rolling_upgrade",
                "uid":"5726fffc0807a3bea1cd2cd9",
                "users":[

                ],
                "teams":[

                ],
                "emails":[

                ],
                "initial_count":"1"
            },
            "y":107.5586090088,
            "x":285.2409973145,
            "os_type":"Linux"
        },
        {
            "tasks":[

            ],
            "uid":"cid:00000003",
            "classification":"compute",
            "address":null,
            "credential_id":null,
            "autoscale_config":{
                "post_flow":null,
                "cool_down_period":"1800",
                "uid":"572701c00807a3bea1cd3410",
                "classification":null,
                "alert_count":"1",
                "max_count":"1",
                "pre_flow":null,
                "min_count":"1",
                "listen_for":"external",
                "scale_by":"1",
                "alert_window":"1800"
            },
            "cost":0.0,
            "strategy_enabled":false,
            "provider":"572c61299acaaf5861311e8f",
            "service_type":"ssh",
            "config":{
                "setup":[

                ],
                "uid":"572701c00807a3bea1cd3413",
                "classification":null,
                "deploy":[
                    "572c61299acaaf5861311e90",
                    "572c61299acaaf5861311e91"
                ]
            },
            "parent":"572c61299acaaf5861311e53",
            "flows":[

            ],
            "dependencies":[
                {
                    "key":"CONFIG",
                    "uid":"572701fe0807a3bea1cd3565",
                    "classification":null,
                    "setter":{
                        "source_id":"cid:00000001",
                        "prop_id":"572700f10807a3bea1cd3082",
                        "uid":"572701fe0807a3bea1cd35c4",
                        "classification":null
                    }
                },
                {
                    "key":"DATA",
                    "uid":"572701fe0807a3bea1cd3566",
                    "classification":null,
                    "setter":{
                        "source_id":"cid:00000002",
                        "prop_id":"572701fe0807a3bea1cd3562",
                        "uid":"572701fe0807a3bea1cd35c5",
                        "classification":null
                    }
                }
            ],
            "service_port":22,
            "bp_id":"572c61299acaaf5861311e53",
            "properties":[

            ],
            "autoscale_enabled":false,
            "name":"Nagios",
            "h":0.0,
            "resiliency_config":{
                "post_flow":null,
                "cool_down_period":"1800",
                "alert_window":"1800",
                "classification":null,
                "alert_count":"1",
                "pre_flow":null,
                "listen_for":"internal",
                "uid":"572701c00807a3bea1cd3411"
            },
            "resiliency_enabled":false,
            "w":0.0,
            "strategy_config":{
                "post_flow":null,
                "rollback_pre_flow":null,
                "classification":null,
                "rolling_factor":"100",
                "initial_version":null,
                "approval_flag":false,
                "upgrade_flow":null,
                "rollback_flow":null,
                "pre_flow":null,
                "rollback_post_flow":null,
                "upgrade_type":"rolling_upgrade",
                "uid":"572701c00807a3bea1cd3412",
                "users":[

                ],
                "teams":[

                ],
                "emails":[

                ],
                "initial_count":"1"
            },
            "y":437.4443054199,
            "x":85.3698501587,
            "os_type":"Linux"
        }
    ],
    "w":0.0,
    "strategy_config":{
        "post_flow":null,
        "rollback_pre_flow":null,
        "classification":null,
        "rolling_factor":"100",
        "initial_version":null,
        "approval_flag":false,
        "upgrade_flow":null,
        "rollback_flow":null,
        "pre_flow":null,
        "rollback_post_flow":null,
        "upgrade_type":"rolling_upgrade",
        "uid":"5726ff960807a3bea1cd2434",
        "users":[

        ],
        "teams":[

        ],
        "emails":[

        ],
        "initial_count":"1"
    },
    "y":0.0,
    "x":0.0
}
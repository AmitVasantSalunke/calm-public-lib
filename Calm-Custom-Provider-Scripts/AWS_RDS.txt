Input arguments:

ACCESS_ID
SECRET_KEY
DBNAME
DB_INSTANCE_IDENTIFIER
DB_STORAGE
DB_INSTANCE_TYPE
DB_ENGINE
MASTER_USER
MASTER_PASSWORD
VPC_SG
DB_SUBNETGROUP
MULTIAZ
DB_ENGINE_VERSION


Provision script:



 Type : Python
 Requires : Boto3



#!/usr/bin/python
from boto3.session import Session
import time
import sys
session = Session(aws_access_key_id='@@{ACCESS_ID}@@',
                  aws_secret_access_key='@@{SECRET_KEY}@@',
                  region_name='us-east-1')
client = session.client('rds')

response = client.create_db_instance(
    DBName='@@{DBNAME}@@',
    DBInstanceIdentifier='@@{DB_INSTANCE_IDENTIFIER}@@',
    AllocatedStorage=@@{DB_STORAGE}@@,
    DBInstanceClass='@@{DB_INSTANCE_TYPE}@@',
    Engine='@@{DB_ENGINE}@@',
    MasterUsername='@@{MASTER_USER}@@',
    VpcSecurityGroupIds=[
        '@@{VPC_SG}@@',
    ],
    MasterUserPassword='@@{MASTER_PASSWORD}@@',
    DBSubnetGroupName='@@{DB_SUBNETGROUP}@@',
    MultiAZ=@@{MULTIAZ}@@,
    EngineVersion='@@{DB_ENGINE_VERSION}@@'
)

clock = 0

while True:
           try:
              status = client.describe_db_instances(DBInstanceIdentifier=response['DBInstance']['DBInstanceIdentifier'])
           except:
              print 'Error: Not able to get status of created DB: %s .' % response['DBInstance']['DBInstanceIdentifier']
        sys.exit(1)
           if status['DBInstances'][0]['DBInstanceStatus'] == 'available':
              print "ENDPOINT_ADDRESS=%s" % status['DBInstances'][0]['Endpoint']['Address']
              print "ENDPOINT_PORT=%d" % status['DBInstances'][0]['Endpoint']['Port']
              print "DB_IDENTIFIER=%s" % response['DBInstance']['DBInstanceIdentifier']
              break
           else:
              time.sleep(3)
              clock += 3
              if clock == 1800:
                 print "DB instance %s not changing to available state." % response['DBInstance']['DBInstanceIdentifier']
                 sys.exit(1)





Output arguments:

ENDPOINT_ADDRESS
ENDPOINT_PORT
RDS_IDENTIFIER





Delete script:
 
 Type: Python
 Requires : boto3

 #!/usr/bin/python

from boto3.session import Session
import time
import sys
session = Session(aws_access_key_id='@@{ACCESS_ID}@@',
                  aws_secret_access_key='@@{SECRET_KEY}@@',
                  region_name='us-east-1')

client = session.client('rds')

response = client.delete_db_instance(
    DBInstanceIdentifier='@@{DB_INSTANCE_IDENTIFIER}@@',
    SkipFinalSnapshot=True
)

while True:
           try:
              status = client.describe_db_instances(DBInstanceIdentifier=response['DBInstance']['DBInstanceIdentifier'])
           except:
              print 'Error: Not able to get status of created DB: %s .' % response['DBInstance']['DBInstanceIdentifier']
        sys.exit(1)
           if status['DBInstances'][0]['DBInstanceStatus'] == 'deleting':
              break
           else:
              time.sleep(3)
              clock += 3
              if clock == 600:
                 print "DB instance %s not deleted." % response['DBInstance']['DBInstanceIdentifier']
                 sys.exit(1)

sys.exit(0)


